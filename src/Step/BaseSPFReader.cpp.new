#include "Step/BaseSPFReader.h"
#include "Step/SPFData.h"
#include "Step/SPFHeader.h"
#include "Step/SPFFunctions.h"
#include "Step/BaseSPFObject.h"
#include "Step/BaseExpressDataSet.h"

#include "Step/logger.h"

using namespace std;
using namespace Step;

BaseSPFReader::BaseSPFReader()
{
}

BaseSPFReader::~BaseSPFReader()
{
}

bool BaseSPFReader::read(std::istream& input)
{
    std::string::size_type i, from;
    m_currentLineNb = 1;
    // Parse the header
    if (!m_header.parse(input, m_currentLineNb))
    {
        LOG_ERROR("BaseSPFReader : Can't parse m_header section, line ");
        return false;
    }

    // DATA section
    string str;

    if (!Step::getLine(input, m_currentLineNb, str) || str != "DATA")
    {
        LOG_ERROR("BaseSPFReader : Can't find DATA section, line "
                << m_currentLineNb);
        return false;
    }

    // #id=ENTITYNAME(......)
    while (true)
    {
        from = 0;
        LOG_DEBUG("Reading line " << m_currentLineNb);

        if (!Step::getLine(input, m_currentLineNb, str))
        {
            LOG_ERROR("BaseSPFReader : Unexpected End Of File, line "
                    << m_currentLineNb);
            return false;
        }

        //ENDSEC detection
        if (str == "ENDSEC")
            break;

        i = str.find('=');
        if (i == string::npos || str[0] != '#')
        {
            LOG_ERROR("BaseSPFReader : Syntax error on entity id, line "
                    << m_currentLineNb);
            return false;
        }

        m_currentId = atoi(str.substr(1, i - 1).c_str());
        from = i + 1;
        i = str.find('(', from);
        if (i == string::npos || str[str.length() - 1] != ')')
        {
            LOG_ERROR(
                    "BaseSPFReader : Syntax error on entity definition, line "
                    << m_currentLineNb);
            return false;
        }

        string entityName = str.substr(from, i - from);
        string line = str.substr(i + 1, str.length() - i - 2);

        m_currentObj = m_expressDataSet->getSPFObject(m_currentId);
        m_currentObj->getArgs()->setParams(line.c_str());

        if (!callLoadFunction(str.substr(from, i - from)))
        {
            LOG_ERROR("BaseSPFReader : Unexpected entity name : "
                    << str.substr(from, i - from) << " , line "
                    << m_currentLineNb);
            return false;
        }
        m_currentObj->setAllocateFunction(m_currentType);
    }

    // END-ISO-10303-21

    if (!Step::getLine(input, m_currentLineNb, str) || str != "END-ISO-10303-21")
    {
        LOG_ERROR("BaseSPFReader : Can't find END-ISO-10303-21 token, line "
                << m_currentLineNb);
        return false;
    }

    return true;
}

Step::Id readerSeek(const std::string& s, int pos)
{
    return Step::Id_UNDEF;
}

BaseExpressDataSet* BaseSPFReader::getExpressDataSet()
{
    return m_expressDataSet;
}

SPFHeader& BaseSPFReader::getHeader()
{
    return m_header;
}
