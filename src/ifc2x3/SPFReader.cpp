// IFC SDK : IFC2X3 C++ Early Classes  
// Copyright (C) 2009 CSTB
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// The full license is in Licence.txt file included with this 
// distribution or is available at :
//     http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.

#include "precompiled.h"

#include <ifc2x3/SPFReader.h>

#include <ifc2x3/ExpressDataSet.h>
#include <ifc2x3/IfcAnnotationSurface.h>
#include <ifc2x3/IfcAppliedValueRelationship.h>
#include <ifc2x3/IfcApprovalActorRelationship.h>
#include <ifc2x3/IfcApprovalRelationship.h>
#include <ifc2x3/IfcClassificationItem.h>
#include <ifc2x3/IfcClassificationItemRelationship.h>
#include <ifc2x3/IfcComplexProperty.h>
#include <ifc2x3/IfcCompositeCurve.h>
#include <ifc2x3/IfcConstraintAggregationRelationship.h>
#include <ifc2x3/IfcConstraintClassificationRelationship.h>
#include <ifc2x3/IfcConstraintRelationship.h>
#include <ifc2x3/IfcDocumentInformation.h>
#include <ifc2x3/IfcDocumentInformationRelationship.h>
#include <ifc2x3/IfcDraughtingCalloutRelationship.h>
#include <ifc2x3/IfcGeometricRepresentationSubContext.h>
#include <ifc2x3/IfcGrid.h>
#include <ifc2x3/IfcLibraryInformation.h>
#include <ifc2x3/IfcLocalPlacement.h>
#include <ifc2x3/IfcMappedItem.h>
#include <ifc2x3/IfcMaterialClassificationRelationship.h>
#include <ifc2x3/IfcMaterialDefinitionRepresentation.h>
#include <ifc2x3/IfcMaterialLayerSet.h>
#include <ifc2x3/IfcOrganization.h>
#include <ifc2x3/IfcOrganizationRelationship.h>
#include <ifc2x3/IfcPerson.h>
#include <ifc2x3/IfcPersonAndOrganization.h>
#include <ifc2x3/IfcPhysicalComplexQuantity.h>
#include <ifc2x3/IfcPresentationLayerAssignment.h>
#include <ifc2x3/IfcProduct.h>
#include <ifc2x3/IfcProductRepresentation.h>
#include <ifc2x3/IfcPropertyConstraintRelationship.h>
#include <ifc2x3/IfcPropertyDependencyRelationship.h>
#include <ifc2x3/IfcReferencesValueDocument.h>
#include <ifc2x3/IfcRelAssigns.h>
#include <ifc2x3/IfcRelAssignsTasks.h>
#include <ifc2x3/IfcRelAssignsToActor.h>
#include <ifc2x3/IfcRelAssignsToControl.h>
#include <ifc2x3/IfcRelAssignsToGroup.h>
#include <ifc2x3/IfcRelAssignsToProcess.h>
#include <ifc2x3/IfcRelAssignsToProduct.h>
#include <ifc2x3/IfcRelAssignsToResource.h>
#include <ifc2x3/IfcRelAssociates.h>
#include <ifc2x3/IfcRelConnectsElements.h>
#include <ifc2x3/IfcRelConnectsPortToElement.h>
#include <ifc2x3/IfcRelConnectsPorts.h>
#include <ifc2x3/IfcRelConnectsStructuralActivity.h>
#include <ifc2x3/IfcRelConnectsStructuralElement.h>
#include <ifc2x3/IfcRelConnectsStructuralMember.h>
#include <ifc2x3/IfcRelConnectsWithRealizingElements.h>
#include <ifc2x3/IfcRelContainedInSpatialStructure.h>
#include <ifc2x3/IfcRelCoversBldgElements.h>
#include <ifc2x3/IfcRelCoversSpaces.h>
#include <ifc2x3/IfcRelDecomposes.h>
#include <ifc2x3/IfcRelDefines.h>
#include <ifc2x3/IfcRelDefinesByProperties.h>
#include <ifc2x3/IfcRelDefinesByType.h>
#include <ifc2x3/IfcRelFillsElement.h>
#include <ifc2x3/IfcRelFlowControlElements.h>
#include <ifc2x3/IfcRelInteractionRequirements.h>
#include <ifc2x3/IfcRelProjectsElement.h>
#include <ifc2x3/IfcRelReferencedInSpatialStructure.h>
#include <ifc2x3/IfcRelSequence.h>
#include <ifc2x3/IfcRelServicesBuildings.h>
#include <ifc2x3/IfcRelSpaceBoundary.h>
#include <ifc2x3/IfcRelVoidsElement.h>
#include <ifc2x3/IfcRepresentation.h>
#include <ifc2x3/IfcRepresentationMap.h>
#include <ifc2x3/IfcShapeAspect.h>
#include <ifc2x3/IfcStructuralAction.h>
#include <ifc2x3/IfcStructuralAnalysisModel.h>
#include <ifc2x3/IfcStructuralResultGroup.h>
#include <ifc2x3/IfcStyledItem.h>
#include <ifc2x3/IfcTable.h>
#include <ifc2x3/IfcTerminatorSymbol.h>
#include <ifc2x3/IfcTimeSeriesReferenceRelationship.h>
#include <ifc2x3/IfcTypeObject.h>
#include <ifc2x3/IfcVirtualGridIntersection.h>
#include <Step/BaseSPFObject.h>
#include <Step/BaseSPFReader.h>
#include <Step/SPFFunctions.h>
#include <Step/logger.h>


#include <vector>

using namespace ifc2x3;

typedef bool (ifc2x3::SPFReader::*LoadFn) (bool) ;

struct LoadFnStruct
{
    LoadFn _loadFn; // load method
};

/**
 * Map to find load method from ENTITY name.
 *
 */
typedef std::map< std::string, LoadFnStruct> Str2LoadFn;
Str2LoadFn s_Str2LoadFn;

bool SPFReader::InitFnMap()
{
    s_Str2LoadFn["IFCRELASSIGNSTOCONTROL"]._loadFn = &SPFReader::loadIFCRELASSIGNSTOCONTROL,0;
    s_Str2LoadFn["IFCPARAMETERIZEDPROFILEDEF"]._loadFn = &SPFReader::loadIFCPARAMETERIZEDPROFILEDEF;
    s_Str2LoadFn["IFCTUBEBUNDLETYPE"]._loadFn = &SPFReader::loadIFCTUBEBUNDLETYPE;
    s_Str2LoadFn["IFCCOMPLEXPROPERTY"]._loadFn = &SPFReader::loadIFCCOMPLEXPROPERTY;
    s_Str2LoadFn["IFCLOCALPLACEMENT"]._loadFn = &SPFReader::loadIFCLOCALPLACEMENT;
    s_Str2LoadFn["IFCSURFACESTYLERENDERING"]._loadFn = &SPFReader::loadIFCSURFACESTYLERENDERING;
    s_Str2LoadFn["IFCRELNESTS"]._loadFn = &SPFReader::loadIFCRELNESTS;
    s_Str2LoadFn["IFCSHAPEREPRESENTATION"]._loadFn = &SPFReader::loadIFCSHAPEREPRESENTATION;
    s_Str2LoadFn["IFCDISCRETEACCESSORYTYPE"]._loadFn = &SPFReader::loadIFCDISCRETEACCESSORYTYPE;
    s_Str2LoadFn["IFCPROPERTYBOUNDEDVALUE"]._loadFn = &SPFReader::loadIFCPROPERTYBOUNDEDVALUE;
    s_Str2LoadFn["IFCMATERIAL"]._loadFn = &SPFReader::loadIFCMATERIAL;
    s_Str2LoadFn["IFCBEAMTYPE"]._loadFn = &SPFReader::loadIFCBEAMTYPE;
    s_Str2LoadFn["IFCBUILDINGELEMENTTYPE"]._loadFn = &SPFReader::loadIFCBUILDINGELEMENTTYPE;
    s_Str2LoadFn["IFCREINFORCEMENTDEFINITIONPROPERTIES"]._loadFn = &SPFReader::loadIFCREINFORCEMENTDEFINITIONPROPERTIES;
    s_Str2LoadFn["IFCCONNECTEDFACESET"]._loadFn = &SPFReader::loadIFCCONNECTEDFACESET;
    s_Str2LoadFn["IFCFACE"]._loadFn = &SPFReader::loadIFCFACE;
    s_Str2LoadFn["IFCSPACEHEATERTYPE"]._loadFn = &SPFReader::loadIFCSPACEHEATERTYPE;
    s_Str2LoadFn["IFCCONNECTIONPOINTGEOMETRY"]._loadFn = &SPFReader::loadIFCCONNECTIONPOINTGEOMETRY;
    s_Str2LoadFn["IFCBOOLEANRESULT"]._loadFn = &SPFReader::loadIFCBOOLEANRESULT;
    s_Str2LoadFn["IFCSWEPTDISKSOLID"]._loadFn = &SPFReader::loadIFCSWEPTDISKSOLID;
    s_Str2LoadFn["IFCSUBEDGE"]._loadFn = &SPFReader::loadIFCSUBEDGE;
    s_Str2LoadFn["IFCPREDEFINEDPOINTMARKERSYMBOL"]._loadFn = &SPFReader::loadIFCPREDEFINEDPOINTMARKERSYMBOL;
    s_Str2LoadFn["IFCSURFACESTYLE"]._loadFn = &SPFReader::loadIFCSURFACESTYLE;
    s_Str2LoadFn["IFCSTRUCTUREDDIMENSIONCALLOUT"]._loadFn = &SPFReader::loadIFCSTRUCTUREDDIMENSIONCALLOUT;
    s_Str2LoadFn["IFCSPACETYPE"]._loadFn = &SPFReader::loadIFCSPACETYPE;
    s_Str2LoadFn["IFCPROJECTORDER"]._loadFn = &SPFReader::loadIFCPROJECTORDER;
    s_Str2LoadFn["IFCCONDENSERTYPE"]._loadFn = &SPFReader::loadIFCCONDENSERTYPE;
    s_Str2LoadFn["IFCHEATEXCHANGERTYPE"]._loadFn = &SPFReader::loadIFCHEATEXCHANGERTYPE;
    s_Str2LoadFn["IFCSTRUCTURALLOADSINGLEFORCEWARPING"]._loadFn = &SPFReader::loadIFCSTRUCTURALLOADSINGLEFORCEWARPING;
    s_Str2LoadFn["IFCFASTENER"]._loadFn = &SPFReader::loadIFCFASTENER;
    s_Str2LoadFn["IFCOPENSHELL"]._loadFn = &SPFReader::loadIFCOPENSHELL;
    s_Str2LoadFn["IFCOFFSETCURVE2D"]._loadFn = &SPFReader::loadIFCOFFSETCURVE2D;
    s_Str2LoadFn["IFCCONDITION"]._loadFn = &SPFReader::loadIFCCONDITION;
    s_Str2LoadFn["IFCBEAM"]._loadFn = &SPFReader::loadIFCBEAM;
    s_Str2LoadFn["IFCPROXY"]._loadFn = &SPFReader::loadIFCPROXY;
    s_Str2LoadFn["IFCPERSON"]._loadFn = &SPFReader::loadIFCPERSON;
    s_Str2LoadFn["IFCSTRUCTURALCURVEMEMBER"]._loadFn = &SPFReader::loadIFCSTRUCTURALCURVEMEMBER;
    s_Str2LoadFn["IFCBOXEDHALFSPACE"]._loadFn = &SPFReader::loadIFCBOXEDHALFSPACE;
    s_Str2LoadFn["IFCQUANTITYAREA"]._loadFn = &SPFReader::loadIFCQUANTITYAREA;
    s_Str2LoadFn["IFCEXTENDEDMATERIALPROPERTIES"]._loadFn = &SPFReader::loadIFCEXTENDEDMATERIALPROPERTIES;
    s_Str2LoadFn["IFCOPTICALMATERIALPROPERTIES"]._loadFn = &SPFReader::loadIFCOPTICALMATERIALPROPERTIES;
    s_Str2LoadFn["IFCCONSTRAINT"]._loadFn = &SPFReader::loadIFCCONSTRAINT;
    s_Str2LoadFn["IFCSLIPPAGECONNECTIONCONDITION"]._loadFn = &SPFReader::loadIFCSLIPPAGECONNECTIONCONDITION;
    s_Str2LoadFn["IFCPROPERTYENUMERATEDVALUE"]._loadFn = &SPFReader::loadIFCPROPERTYENUMERATEDVALUE;
    s_Str2LoadFn["IFCRELCONNECTSELEMENTS"]._loadFn = &SPFReader::loadIFCRELCONNECTSELEMENTS;
    s_Str2LoadFn["IFCOUTLETTYPE"]._loadFn = &SPFReader::loadIFCOUTLETTYPE;
    s_Str2LoadFn["IFCTIMESERIES"]._loadFn = &SPFReader::loadIFCTIMESERIES;
    s_Str2LoadFn["IFCIRREGULARTIMESERIES"]._loadFn = &SPFReader::loadIFCIRREGULARTIMESERIES;
    s_Str2LoadFn["IFCSTRUCTURALPOINTREACTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALPOINTREACTION;
    s_Str2LoadFn["IFCONEDIRECTIONREPEATFACTOR"]._loadFn = &SPFReader::loadIFCONEDIRECTIONREPEATFACTOR;
    s_Str2LoadFn["IFCPRODUCT"]._loadFn = &SPFReader::loadIFCPRODUCT;
    s_Str2LoadFn["IFCADDRESS"]._loadFn = &SPFReader::loadIFCADDRESS;
    s_Str2LoadFn["IFCPRESENTATIONLAYERASSIGNMENT"]._loadFn = &SPFReader::loadIFCPRESENTATIONLAYERASSIGNMENT;
    s_Str2LoadFn["IFCSIUNIT"]._loadFn = &SPFReader::loadIFCSIUNIT;
    s_Str2LoadFn["IFCFEATUREELEMENTADDITION"]._loadFn = &SPFReader::loadIFCFEATUREELEMENTADDITION;
    s_Str2LoadFn["IFCCRANERAILASHAPEPROFILEDEF"]._loadFn = &SPFReader::loadIFCCRANERAILASHAPEPROFILEDEF;
    s_Str2LoadFn["IFCFILTERTYPE"]._loadFn = &SPFReader::loadIFCFILTERTYPE;
    s_Str2LoadFn["IFCLINEARDIMENSION"]._loadFn = &SPFReader::loadIFCLINEARDIMENSION;
    s_Str2LoadFn["IFCWATERPROPERTIES"]._loadFn = &SPFReader::loadIFCWATERPROPERTIES;
    s_Str2LoadFn["IFCTYPEPRODUCT"]._loadFn = &SPFReader::loadIFCTYPEPRODUCT;
    s_Str2LoadFn["IFCEQUIPMENTELEMENT"]._loadFn = &SPFReader::loadIFCEQUIPMENTELEMENT;
    s_Str2LoadFn["IFCIRREGULARTIMESERIESVALUE"]._loadFn = &SPFReader::loadIFCIRREGULARTIMESERIESVALUE;
    s_Str2LoadFn["IFCVALVETYPE"]._loadFn = &SPFReader::loadIFCVALVETYPE;
    s_Str2LoadFn["IFCROOF"]._loadFn = &SPFReader::loadIFCROOF;
    s_Str2LoadFn["IFCREINFORCINGBAR"]._loadFn = &SPFReader::loadIFCREINFORCINGBAR;
    s_Str2LoadFn["IFCPRESENTATIONSTYLEASSIGNMENT"]._loadFn = &SPFReader::loadIFCPRESENTATIONSTYLEASSIGNMENT;
    s_Str2LoadFn["IFCRELCOVERSBLDGELEMENTS"]._loadFn = &SPFReader::loadIFCRELCOVERSBLDGELEMENTS;
    s_Str2LoadFn["IFCREINFORCINGELEMENT"]._loadFn = &SPFReader::loadIFCREINFORCINGELEMENT;
    s_Str2LoadFn["IFCACTUATORTYPE"]._loadFn = &SPFReader::loadIFCACTUATORTYPE;
    s_Str2LoadFn["IFCSERVICELIFE"]._loadFn = &SPFReader::loadIFCSERVICELIFE;
    s_Str2LoadFn["IFCVECTOR"]._loadFn = &SPFReader::loadIFCVECTOR;
    s_Str2LoadFn["IFCALARMTYPE"]._loadFn = &SPFReader::loadIFCALARMTYPE;
    s_Str2LoadFn["IFCARBITRARYPROFILEDEFWITHVOIDS"]._loadFn = &SPFReader::loadIFCARBITRARYPROFILEDEFWITHVOIDS;
    s_Str2LoadFn["IFCDOCUMENTINFORMATION"]._loadFn = &SPFReader::loadIFCDOCUMENTINFORMATION;
    s_Str2LoadFn["IFCSYMBOLSTYLE"]._loadFn = &SPFReader::loadIFCSYMBOLSTYLE;
    s_Str2LoadFn["IFCRIBPLATEPROFILEPROPERTIES"]._loadFn = &SPFReader::loadIFCRIBPLATEPROFILEPROPERTIES;
    s_Str2LoadFn["IFCWINDOW"]._loadFn = &SPFReader::loadIFCWINDOW;
    s_Str2LoadFn["IFCROUNDEDEDGEFEATURE"]._loadFn = &SPFReader::loadIFCROUNDEDEDGEFEATURE;
    s_Str2LoadFn["IFCSTRUCTURALCURVECONNECTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALCURVECONNECTION;
    s_Str2LoadFn["IFCLINE"]._loadFn = &SPFReader::loadIFCLINE;
    s_Str2LoadFn["IFCSPACETHERMALLOADPROPERTIES"]._loadFn = &SPFReader::loadIFCSPACETHERMALLOADPROPERTIES;
    s_Str2LoadFn["IFCAXIS2PLACEMENT2D"]._loadFn = &SPFReader::loadIFCAXIS2PLACEMENT2D;
    s_Str2LoadFn["IFCPROPERTYCONSTRAINTRELATIONSHIP"]._loadFn = &SPFReader::loadIFCPROPERTYCONSTRAINTRELATIONSHIP;
    s_Str2LoadFn["IFCTIMESERIESREFERENCERELATIONSHIP"]._loadFn = &SPFReader::loadIFCTIMESERIESREFERENCERELATIONSHIP;
    s_Str2LoadFn["IFCPOLYGONALBOUNDEDHALFSPACE"]._loadFn = &SPFReader::loadIFCPOLYGONALBOUNDEDHALFSPACE;
    s_Str2LoadFn["IFCSTYLEDITEM"]._loadFn = &SPFReader::loadIFCSTYLEDITEM;
    s_Str2LoadFn["IFCDRAUGHTINGCALLOUT"]._loadFn = &SPFReader::loadIFCDRAUGHTINGCALLOUT;
    s_Str2LoadFn["IFCOFFSETCURVE3D"]._loadFn = &SPFReader::loadIFCOFFSETCURVE3D;
    s_Str2LoadFn["IFCTEXTUREVERTEX"]._loadFn = &SPFReader::loadIFCTEXTUREVERTEX;
    s_Str2LoadFn["IFCRELSPACEBOUNDARY"]._loadFn = &SPFReader::loadIFCRELSPACEBOUNDARY;
    s_Str2LoadFn["IFCLIGHTSOURCEPOSITIONAL"]._loadFn = &SPFReader::loadIFCLIGHTSOURCEPOSITIONAL;
    s_Str2LoadFn["IFCRELATIONSHIP"]._loadFn = &SPFReader::loadIFCRELATIONSHIP;
    s_Str2LoadFn["IFCDATEANDTIME"]._loadFn = &SPFReader::loadIFCDATEANDTIME;
    s_Str2LoadFn["IFCTASK"]._loadFn = &SPFReader::loadIFCTASK;
    s_Str2LoadFn["IFCFAILURECONNECTIONCONDITION"]._loadFn = &SPFReader::loadIFCFAILURECONNECTIONCONDITION;
    s_Str2LoadFn["IFCPREDEFINEDTERMINATORSYMBOL"]._loadFn = &SPFReader::loadIFCPREDEFINEDTERMINATORSYMBOL;
    s_Str2LoadFn["IFCCOSTITEM"]._loadFn = &SPFReader::loadIFCCOSTITEM;
    s_Str2LoadFn["IFCCOLUMN"]._loadFn = &SPFReader::loadIFCCOLUMN;
    s_Str2LoadFn["IFCWORKPLAN"]._loadFn = &SPFReader::loadIFCWORKPLAN;
    s_Str2LoadFn["IFCFURNITURETYPE"]._loadFn = &SPFReader::loadIFCFURNITURETYPE;
    s_Str2LoadFn["IFCPROPERTYDEPENDENCYRELATIONSHIP"]._loadFn = &SPFReader::loadIFCPROPERTYDEPENDENCYRELATIONSHIP;
    s_Str2LoadFn["IFCDOORLININGPROPERTIES"]._loadFn = &SPFReader::loadIFCDOORLININGPROPERTIES;
    s_Str2LoadFn["IFCRELASSIGNSTASKS"]._loadFn = &SPFReader::loadIFCRELASSIGNSTASKS;
    s_Str2LoadFn["IFCRELAGGREGATES"]._loadFn = &SPFReader::loadIFCRELAGGREGATES;
    s_Str2LoadFn["IFCELEMENTASSEMBLY"]._loadFn = &SPFReader::loadIFCELEMENTASSEMBLY;
    s_Str2LoadFn["IFCPIXELTEXTURE"]._loadFn = &SPFReader::loadIFCPIXELTEXTURE;
    s_Str2LoadFn["IFCTEXTUREMAP"]._loadFn = &SPFReader::loadIFCTEXTUREMAP;
    s_Str2LoadFn["IFCSURFACEOFREVOLUTION"]._loadFn = &SPFReader::loadIFCSURFACEOFREVOLUTION;
    s_Str2LoadFn["IFCSPATIALSTRUCTUREELEMENTTYPE"]._loadFn = &SPFReader::loadIFCSPATIALSTRUCTUREELEMENTTYPE;
    s_Str2LoadFn["IFCQUANTITYWEIGHT"]._loadFn = &SPFReader::loadIFCQUANTITYWEIGHT;
    s_Str2LoadFn["IFCSTRUCTURALLOADLINEARFORCE"]._loadFn = &SPFReader::loadIFCSTRUCTURALLOADLINEARFORCE;
    s_Str2LoadFn["IFCLIGHTSOURCEGONIOMETRIC"]._loadFn = &SPFReader::loadIFCLIGHTSOURCEGONIOMETRIC;
    s_Str2LoadFn["IFCZONE"]._loadFn = &SPFReader::loadIFCZONE;
    s_Str2LoadFn["IFCASYMMETRICISHAPEPROFILEDEF"]._loadFn = &SPFReader::loadIFCASYMMETRICISHAPEPROFILEDEF;
    s_Str2LoadFn["IFCLIGHTSOURCE"]._loadFn = &SPFReader::loadIFCLIGHTSOURCE;
    s_Str2LoadFn["IFCSPACE"]._loadFn = &SPFReader::loadIFCSPACE;
    s_Str2LoadFn["IFCRADIUSDIMENSION"]._loadFn = &SPFReader::loadIFCRADIUSDIMENSION;
    s_Str2LoadFn["IFCCENTERLINEPROFILEDEF"]._loadFn = &SPFReader::loadIFCCENTERLINEPROFILEDEF;
    s_Str2LoadFn["IFCDRAUGHTINGCALLOUTRELATIONSHIP"]._loadFn = &SPFReader::loadIFCDRAUGHTINGCALLOUTRELATIONSHIP;
    s_Str2LoadFn["IFCMECHANICALMATERIALPROPERTIES"]._loadFn = &SPFReader::loadIFCMECHANICALMATERIALPROPERTIES;
    s_Str2LoadFn["IFCCHAMFEREDGEFEATURE"]._loadFn = &SPFReader::loadIFCCHAMFEREDGEFEATURE;
    s_Str2LoadFn["IFCUNITARYEQUIPMENTTYPE"]._loadFn = &SPFReader::loadIFCUNITARYEQUIPMENTTYPE;
    s_Str2LoadFn["IFCDAMPERTYPE"]._loadFn = &SPFReader::loadIFCDAMPERTYPE;
    s_Str2LoadFn["IFCRELOCCUPIESSPACES"]._loadFn = &SPFReader::loadIFCRELOCCUPIESSPACES;
    s_Str2LoadFn["IFCNAMEDUNIT"]._loadFn = &SPFReader::loadIFCNAMEDUNIT;
    s_Str2LoadFn["IFCCLASSIFICATIONITEM"]._loadFn = &SPFReader::loadIFCCLASSIFICATIONITEM;
    s_Str2LoadFn["IFCINVENTORY"]._loadFn = &SPFReader::loadIFCINVENTORY;
    s_Str2LoadFn["IFCRELASSIGNSTORESOURCE"]._loadFn = &SPFReader::loadIFCRELASSIGNSTORESOURCE;
    s_Str2LoadFn["IFCPATH"]._loadFn = &SPFReader::loadIFCPATH;
    s_Str2LoadFn["IFCTENDONANCHOR"]._loadFn = &SPFReader::loadIFCTENDONANCHOR;
    s_Str2LoadFn["IFCPREDEFINEDSYMBOL"]._loadFn = &SPFReader::loadIFCPREDEFINEDSYMBOL;
    s_Str2LoadFn["IFCGRIDPLACEMENT"]._loadFn = &SPFReader::loadIFCGRIDPLACEMENT;
    s_Str2LoadFn["IFCCURVESTYLE"]._loadFn = &SPFReader::loadIFCCURVESTYLE;
    s_Str2LoadFn["IFCPRESENTATIONSTYLE"]._loadFn = &SPFReader::loadIFCPRESENTATIONSTYLE;
    s_Str2LoadFn["IFCDOCUMENTINFORMATIONRELATIONSHIP"]._loadFn = &SPFReader::loadIFCDOCUMENTINFORMATIONRELATIONSHIP;
    s_Str2LoadFn["IFCGEOMETRICCURVESET"]._loadFn = &SPFReader::loadIFCGEOMETRICCURVESET;
    s_Str2LoadFn["IFCRELCONNECTSWITHECCENTRICITY"]._loadFn = &SPFReader::loadIFCRELCONNECTSWITHECCENTRICITY;
    s_Str2LoadFn["IFCEXTERNALLYDEFINEDTEXTFONT"]._loadFn = &SPFReader::loadIFCEXTERNALLYDEFINEDTEXTFONT;
    s_Str2LoadFn["IFCVERTEXBASEDTEXTUREMAP"]._loadFn = &SPFReader::loadIFCVERTEXBASEDTEXTUREMAP;
    s_Str2LoadFn["IFCCIRCLEHOLLOWPROFILEDEF"]._loadFn = &SPFReader::loadIFCCIRCLEHOLLOWPROFILEDEF;
    s_Str2LoadFn["IFCSTRUCTURALLINEARACTIONVARYING"]._loadFn = &SPFReader::loadIFCSTRUCTURALLINEARACTIONVARYING;
    s_Str2LoadFn["IFCBUILDINGELEMENTPROXY"]._loadFn = &SPFReader::loadIFCBUILDINGELEMENTPROXY;
    s_Str2LoadFn["IFCELECTRICTIMECONTROLTYPE"]._loadFn = &SPFReader::loadIFCELECTRICTIMECONTROLTYPE;
    s_Str2LoadFn["IFCEXTERNALLYDEFINEDSURFACESTYLE"]._loadFn = &SPFReader::loadIFCEXTERNALLYDEFINEDSURFACESTYLE;
    s_Str2LoadFn["IFCACTOR"]._loadFn = &SPFReader::loadIFCACTOR;
    s_Str2LoadFn["IFCEDGECURVE"]._loadFn = &SPFReader::loadIFCEDGECURVE;
    s_Str2LoadFn["IFCELECTRICFLOWSTORAGEDEVICETYPE"]._loadFn = &SPFReader::loadIFCELECTRICFLOWSTORAGEDEVICETYPE;
    s_Str2LoadFn["IFCTRANSPORTELEMENTTYPE"]._loadFn = &SPFReader::loadIFCTRANSPORTELEMENTTYPE;
    s_Str2LoadFn["IFCMANIFOLDSOLIDBREP"]._loadFn = &SPFReader::loadIFCMANIFOLDSOLIDBREP;
    s_Str2LoadFn["IFCRELASSOCIATESCONSTRAINT"]._loadFn = &SPFReader::loadIFCRELASSOCIATESCONSTRAINT;
    s_Str2LoadFn["IFCQUANTITYCOUNT"]._loadFn = &SPFReader::loadIFCQUANTITYCOUNT;
    s_Str2LoadFn["IFCOBJECTPLACEMENT"]._loadFn = &SPFReader::loadIFCOBJECTPLACEMENT;
    s_Str2LoadFn["IFCEXTERNALREFERENCE"]._loadFn = &SPFReader::loadIFCEXTERNALREFERENCE;
    s_Str2LoadFn["IFCTEXTSTYLETEXTMODEL"]._loadFn = &SPFReader::loadIFCTEXTSTYLETEXTMODEL;
    s_Str2LoadFn["IFCVIBRATIONISOLATORTYPE"]._loadFn = &SPFReader::loadIFCVIBRATIONISOLATORTYPE;
    s_Str2LoadFn["IFCCONVERSIONBASEDUNIT"]._loadFn = &SPFReader::loadIFCCONVERSIONBASEDUNIT;
    s_Str2LoadFn["IFCREGULARTIMESERIES"]._loadFn = &SPFReader::loadIFCREGULARTIMESERIES;
    s_Str2LoadFn["IFCDIMENSIONALEXPONENTS"]._loadFn = &SPFReader::loadIFCDIMENSIONALEXPONENTS;
    s_Str2LoadFn["IFCRELASSOCIATESLIBRARY"]._loadFn = &SPFReader::loadIFCRELASSOCIATESLIBRARY;
    s_Str2LoadFn["IFCTYPEOBJECT"]._loadFn = &SPFReader::loadIFCTYPEOBJECT;
    s_Str2LoadFn["IFCCOSTSCHEDULE"]._loadFn = &SPFReader::loadIFCCOSTSCHEDULE;
    s_Str2LoadFn["IFCSUBCONTRACTRESOURCE"]._loadFn = &SPFReader::loadIFCSUBCONTRACTRESOURCE;
    s_Str2LoadFn["IFCRELSEQUENCE"]._loadFn = &SPFReader::loadIFCRELSEQUENCE;
    s_Str2LoadFn["IFCSYSTEMFURNITUREELEMENTTYPE"]._loadFn = &SPFReader::loadIFCSYSTEMFURNITUREELEMENTTYPE;
    s_Str2LoadFn["IFCCALENDARDATE"]._loadFn = &SPFReader::loadIFCCALENDARDATE;
    s_Str2LoadFn["IFCSTRUCTURALLOAD"]._loadFn = &SPFReader::loadIFCSTRUCTURALLOAD;
    s_Str2LoadFn["IFCHYGROSCOPICMATERIALPROPERTIES"]._loadFn = &SPFReader::loadIFCHYGROSCOPICMATERIALPROPERTIES;
    s_Str2LoadFn["IFCTSHAPEPROFILEDEF"]._loadFn = &SPFReader::loadIFCTSHAPEPROFILEDEF;
    s_Str2LoadFn["IFCFLOWTERMINALTYPE"]._loadFn = &SPFReader::loadIFCFLOWTERMINALTYPE;
    s_Str2LoadFn["IFCHALFSPACESOLID"]._loadFn = &SPFReader::loadIFCHALFSPACESOLID;
    s_Str2LoadFn["IFCMATERIALLIST"]._loadFn = &SPFReader::loadIFCMATERIALLIST;
    s_Str2LoadFn["IFCRELASSOCIATESMATERIAL"]._loadFn = &SPFReader::loadIFCRELASSOCIATESMATERIAL;
    s_Str2LoadFn["IFCFEATUREELEMENT"]._loadFn = &SPFReader::loadIFCFEATUREELEMENT;
    s_Str2LoadFn["IFCDISTRIBUTIONELEMENTTYPE"]._loadFn = &SPFReader::loadIFCDISTRIBUTIONELEMENTTYPE;
    s_Str2LoadFn["IFCWINDOWPANELPROPERTIES"]._loadFn = &SPFReader::loadIFCWINDOWPANELPROPERTIES;
    s_Str2LoadFn["IFCMAPPEDITEM"]._loadFn = &SPFReader::loadIFCMAPPEDITEM;
    s_Str2LoadFn["IFCTEXTLITERAL"]._loadFn = &SPFReader::loadIFCTEXTLITERAL;
    s_Str2LoadFn["IFCLIGHTDISTRIBUTIONDATA"]._loadFn = &SPFReader::loadIFCLIGHTDISTRIBUTIONDATA;
    s_Str2LoadFn["IFCTWODIRECTIONREPEATFACTOR"]._loadFn = &SPFReader::loadIFCTWODIRECTIONREPEATFACTOR;
    s_Str2LoadFn["IFCRELASSOCIATESAPPROVAL"]._loadFn = &SPFReader::loadIFCRELASSOCIATESAPPROVAL;
    s_Str2LoadFn["IFCRAILINGTYPE"]._loadFn = &SPFReader::loadIFCRAILINGTYPE;
    s_Str2LoadFn["IFCPOINTONSURFACE"]._loadFn = &SPFReader::loadIFCPOINTONSURFACE;
    s_Str2LoadFn["IFCTENDON"]._loadFn = &SPFReader::loadIFCTENDON;
    s_Str2LoadFn["IFCSTRUCTURALACTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALACTION;
    s_Str2LoadFn["IFCRELDECOMPOSES"]._loadFn = &SPFReader::loadIFCRELDECOMPOSES;
    s_Str2LoadFn["IFCENERGYPROPERTIES"]._loadFn = &SPFReader::loadIFCENERGYPROPERTIES;
    s_Str2LoadFn["IFCIMAGETEXTURE"]._loadFn = &SPFReader::loadIFCIMAGETEXTURE;
    s_Str2LoadFn["IFCFILLAREASTYLEHATCHING"]._loadFn = &SPFReader::loadIFCFILLAREASTYLEHATCHING;
    s_Str2LoadFn["IFCDRAUGHTINGPREDEFINEDCOLOUR"]._loadFn = &SPFReader::loadIFCDRAUGHTINGPREDEFINEDCOLOUR;
    s_Str2LoadFn["IFCOBJECTDEFINITION"]._loadFn = &SPFReader::loadIFCOBJECTDEFINITION;
    s_Str2LoadFn["IFCPROJECTIONELEMENT"]._loadFn = &SPFReader::loadIFCPROJECTIONELEMENT;
    s_Str2LoadFn["IFCPROJECTORDERRECORD"]._loadFn = &SPFReader::loadIFCPROJECTORDERRECORD;
    s_Str2LoadFn["IFCDIMENSIONCURVEDIRECTEDCALLOUT"]._loadFn = &SPFReader::loadIFCDIMENSIONCURVEDIRECTEDCALLOUT;
    s_Str2LoadFn["IFCDOORPANELPROPERTIES"]._loadFn = &SPFReader::loadIFCDOORPANELPROPERTIES;
    s_Str2LoadFn["IFCVERTEX"]._loadFn = &SPFReader::loadIFCVERTEX;
    s_Str2LoadFn["IFCTRANSPORTELEMENT"]._loadFn = &SPFReader::loadIFCTRANSPORTELEMENT;
    s_Str2LoadFn["IFCCURVESTYLEFONTPATTERN"]._loadFn = &SPFReader::loadIFCCURVESTYLEFONTPATTERN;
    s_Str2LoadFn["IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION;
    s_Str2LoadFn["IFCSPHERE"]._loadFn = &SPFReader::loadIFCSPHERE;
    s_Str2LoadFn["IFCELEMENT"]._loadFn = &SPFReader::loadIFCELEMENT;
    s_Str2LoadFn["IFCSURFACETEXTURE"]._loadFn = &SPFReader::loadIFCSURFACETEXTURE;
    s_Str2LoadFn["IFCSTRUCTURALPOINTACTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALPOINTACTION;
    s_Str2LoadFn["IFCRECTANGLEHOLLOWPROFILEDEF"]._loadFn = &SPFReader::loadIFCRECTANGLEHOLLOWPROFILEDEF;
    s_Str2LoadFn["IFCTELECOMADDRESS"]._loadFn = &SPFReader::loadIFCTELECOMADDRESS;
    s_Str2LoadFn["IFCBEZIERCURVE"]._loadFn = &SPFReader::loadIFCBEZIERCURVE;
    s_Str2LoadFn["IFCFACESURFACE"]._loadFn = &SPFReader::loadIFCFACESURFACE;
    s_Str2LoadFn["IFCSCHEDULETIMECONTROL"]._loadFn = &SPFReader::loadIFCSCHEDULETIMECONTROL;
    s_Str2LoadFn["IFCLIGHTSOURCEAMBIENT"]._loadFn = &SPFReader::loadIFCLIGHTSOURCEAMBIENT;
    s_Str2LoadFn["IFCPROJECT"]._loadFn = &SPFReader::loadIFCPROJECT;
    s_Str2LoadFn["IFCFLOWSTORAGEDEVICETYPE"]._loadFn = &SPFReader::loadIFCFLOWSTORAGEDEVICETYPE;
    s_Str2LoadFn["IFCDUCTSILENCERTYPE"]._loadFn = &SPFReader::loadIFCDUCTSILENCERTYPE;
    s_Str2LoadFn["IFCCIRCLE"]._loadFn = &SPFReader::loadIFCCIRCLE;
    s_Str2LoadFn["IFCTEXTURECOORDINATEGENERATOR"]._loadFn = &SPFReader::loadIFCTEXTURECOORDINATEGENERATOR;
    s_Str2LoadFn["IFCCONTEXTDEPENDENTUNIT"]._loadFn = &SPFReader::loadIFCCONTEXTDEPENDENTUNIT;
    s_Str2LoadFn["IFCRECTANGULARPYRAMID"]._loadFn = &SPFReader::loadIFCRECTANGULARPYRAMID;
    s_Str2LoadFn["IFCGEOMETRICREPRESENTATIONSUBCONTEXT"]._loadFn = &SPFReader::loadIFCGEOMETRICREPRESENTATIONSUBCONTEXT;
    s_Str2LoadFn["IFCMECHANICALSTEELMATERIALPROPERTIES"]._loadFn = &SPFReader::loadIFCMECHANICALSTEELMATERIALPROPERTIES;
    s_Str2LoadFn["IFCLIBRARYREFERENCE"]._loadFn = &SPFReader::loadIFCLIBRARYREFERENCE;
    s_Str2LoadFn["IFCELECTRICHEATERTYPE"]._loadFn = &SPFReader::loadIFCELECTRICHEATERTYPE;
    s_Str2LoadFn["IFCWASTETERMINALTYPE"]._loadFn = &SPFReader::loadIFCWASTETERMINALTYPE;
    s_Str2LoadFn["IFCOCCUPANT"]._loadFn = &SPFReader::loadIFCOCCUPANT;
    s_Str2LoadFn["IFCANNOTATIONFILLAREA"]._loadFn = &SPFReader::loadIFCANNOTATIONFILLAREA;
    s_Str2LoadFn["IFCFLOWCONTROLLER"]._loadFn = &SPFReader::loadIFCFLOWCONTROLLER;
    s_Str2LoadFn["IFCPERMIT"]._loadFn = &SPFReader::loadIFCPERMIT;
    s_Str2LoadFn["IFCCONSTRUCTIONMATERIALRESOURCE"]._loadFn = &SPFReader::loadIFCCONSTRUCTIONMATERIALRESOURCE;
    s_Str2LoadFn["IFCCARTESIANTRANSFORMATIONOPERATOR3D"]._loadFn = &SPFReader::loadIFCCARTESIANTRANSFORMATIONOPERATOR3D;
    s_Str2LoadFn["IFCELEMENTCOMPONENTTYPE"]._loadFn = &SPFReader::loadIFCELEMENTCOMPONENTTYPE;
    s_Str2LoadFn["IFCPROPERTYSET"]._loadFn = &SPFReader::loadIFCPROPERTYSET;
    s_Str2LoadFn["IFCDOOR"]._loadFn = &SPFReader::loadIFCDOOR;
    s_Str2LoadFn["IFCVERTEXLOOP"]._loadFn = &SPFReader::loadIFCVERTEXLOOP;
    s_Str2LoadFn["IFCCARTESIANTRANSFORMATIONOPERATOR"]._loadFn = &SPFReader::loadIFCCARTESIANTRANSFORMATIONOPERATOR;
    s_Str2LoadFn["IFCBOUNDARYNODECONDITION"]._loadFn = &SPFReader::loadIFCBOUNDARYNODECONDITION;
    s_Str2LoadFn["IFCRAILING"]._loadFn = &SPFReader::loadIFCRAILING;
    s_Str2LoadFn["IFCPHYSICALSIMPLEQUANTITY"]._loadFn = &SPFReader::loadIFCPHYSICALSIMPLEQUANTITY;
    s_Str2LoadFn["IFCBUILDING"]._loadFn = &SPFReader::loadIFCBUILDING;
    s_Str2LoadFn["IFCDERIVEDUNIT"]._loadFn = &SPFReader::loadIFCDERIVEDUNIT;
    s_Str2LoadFn["IFCPROFILEPROPERTIES"]._loadFn = &SPFReader::loadIFCPROFILEPROPERTIES;
    s_Str2LoadFn["IFCCHILLERTYPE"]._loadFn = &SPFReader::loadIFCCHILLERTYPE;
    s_Str2LoadFn["IFCBUILDINGSTOREY"]._loadFn = &SPFReader::loadIFCBUILDINGSTOREY;
    s_Str2LoadFn["IFCTERMINATORSYMBOL"]._loadFn = &SPFReader::loadIFCTERMINATORSYMBOL;
    s_Str2LoadFn["IFCFLOWTREATMENTDEVICE"]._loadFn = &SPFReader::loadIFCFLOWTREATMENTDEVICE;
    s_Str2LoadFn["IFCWORKCONTROL"]._loadFn = &SPFReader::loadIFCWORKCONTROL;
    s_Str2LoadFn["IFCBOUNDARYEDGECONDITION"]._loadFn = &SPFReader::loadIFCBOUNDARYEDGECONDITION;
    s_Str2LoadFn["IFCDISTRIBUTIONCONTROLELEMENT"]._loadFn = &SPFReader::loadIFCDISTRIBUTIONCONTROLELEMENT;
    s_Str2LoadFn["IFCFANTYPE"]._loadFn = &SPFReader::loadIFCFANTYPE;
    s_Str2LoadFn["IFCORIENTEDEDGE"]._loadFn = &SPFReader::loadIFCORIENTEDEDGE;
    s_Str2LoadFn["IFCEXTERNALLYDEFINEDHATCHSTYLE"]._loadFn = &SPFReader::loadIFCEXTERNALLYDEFINEDHATCHSTYLE;
    s_Str2LoadFn["IFCPREDEFINEDTEXTFONT"]._loadFn = &SPFReader::loadIFCPREDEFINEDTEXTFONT;
    s_Str2LoadFn["IFCCURVE"]._loadFn = &SPFReader::loadIFCCURVE;
    s_Str2LoadFn["IFCRELREFERENCEDINSPATIALSTRUCTURE"]._loadFn = &SPFReader::loadIFCRELREFERENCEDINSPATIALSTRUCTURE;
    s_Str2LoadFn["IFCRELSCHEDULESCOSTITEMS"]._loadFn = &SPFReader::loadIFCRELSCHEDULESCOSTITEMS;
    s_Str2LoadFn["IFCWALL"]._loadFn = &SPFReader::loadIFCWALL;
    s_Str2LoadFn["IFCCOMPOSITEPROFILEDEF"]._loadFn = &SPFReader::loadIFCCOMPOSITEPROFILEDEF;
    s_Str2LoadFn["IFCMECHANICALFASTENERTYPE"]._loadFn = &SPFReader::loadIFCMECHANICALFASTENERTYPE;
    s_Str2LoadFn["IFCTANKTYPE"]._loadFn = &SPFReader::loadIFCTANKTYPE;
    s_Str2LoadFn["IFCOPENINGELEMENT"]._loadFn = &SPFReader::loadIFCOPENINGELEMENT;
    s_Str2LoadFn["IFCSTRUCTURALSTEELPROFILEPROPERTIES"]._loadFn = &SPFReader::loadIFCSTRUCTURALSTEELPROFILEPROPERTIES;
    s_Str2LoadFn["IFCRAMPFLIGHT"]._loadFn = &SPFReader::loadIFCRAMPFLIGHT;
    s_Str2LoadFn["IFCCOSTVALUE"]._loadFn = &SPFReader::loadIFCCOSTVALUE;
    s_Str2LoadFn["IFCSTRUCTURALSURFACECONNECTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALSURFACECONNECTION;
    s_Str2LoadFn["IFCSTRUCTURALLOADSINGLEDISPLACEMENT"]._loadFn = &SPFReader::loadIFCSTRUCTURALLOADSINGLEDISPLACEMENT;
    s_Str2LoadFn["IFCFILLAREASTYLETILESYMBOLWITHSTYLE"]._loadFn = &SPFReader::loadIFCFILLAREASTYLETILESYMBOLWITHSTYLE;
    s_Str2LoadFn["IFCTOPOLOGYREPRESENTATION"]._loadFn = &SPFReader::loadIFCTOPOLOGYREPRESENTATION;
    s_Str2LoadFn["IFCARBITRARYOPENPROFILEDEF"]._loadFn = &SPFReader::loadIFCARBITRARYOPENPROFILEDEF;
    s_Str2LoadFn["IFCANNOTATIONOCCURRENCE"]._loadFn = &SPFReader::loadIFCANNOTATIONOCCURRENCE;
    s_Str2LoadFn["IFCACTORROLE"]._loadFn = &SPFReader::loadIFCACTORROLE;
    s_Str2LoadFn["IFCWALLTYPE"]._loadFn = &SPFReader::loadIFCWALLTYPE;
    s_Str2LoadFn["IFCSTRUCTURALLINEARACTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALLINEARACTION;
    s_Str2LoadFn["IFCSHELLBASEDSURFACEMODEL"]._loadFn = &SPFReader::loadIFCSHELLBASEDSURFACEMODEL;
    s_Str2LoadFn["IFCLSHAPEPROFILEDEF"]._loadFn = &SPFReader::loadIFCLSHAPEPROFILEDEF;
    s_Str2LoadFn["IFCLIGHTFIXTURETYPE"]._loadFn = &SPFReader::loadIFCLIGHTFIXTURETYPE;
    s_Str2LoadFn["IFCMECHANICALFASTENER"]._loadFn = &SPFReader::loadIFCMECHANICALFASTENER;
    s_Str2LoadFn["IFCCOVERING"]._loadFn = &SPFReader::loadIFCCOVERING;
    s_Str2LoadFn["IFCSWEPTSURFACE"]._loadFn = &SPFReader::loadIFCSWEPTSURFACE;
    s_Str2LoadFn["IFCCURTAINWALLTYPE"]._loadFn = &SPFReader::loadIFCCURTAINWALLTYPE;
    s_Str2LoadFn["IFCSERVICELIFEFACTOR"]._loadFn = &SPFReader::loadIFCSERVICELIFEFACTOR;
    s_Str2LoadFn["IFCLAMPTYPE"]._loadFn = &SPFReader::loadIFCLAMPTYPE;
    s_Str2LoadFn["IFCCIRCLEPROFILEDEF"]._loadFn = &SPFReader::loadIFCCIRCLEPROFILEDEF;
    s_Str2LoadFn["IFCBSPLINECURVE"]._loadFn = &SPFReader::loadIFCBSPLINECURVE;
    s_Str2LoadFn["IFCSECTIONPROPERTIES"]._loadFn = &SPFReader::loadIFCSECTIONPROPERTIES;
    s_Str2LoadFn["IFCPLACEMENT"]._loadFn = &SPFReader::loadIFCPLACEMENT;
    s_Str2LoadFn["IFCREINFORCEMENTBARPROPERTIES"]._loadFn = &SPFReader::loadIFCREINFORCEMENTBARPROPERTIES;
    s_Str2LoadFn["IFCREPRESENTATIONITEM"]._loadFn = &SPFReader::loadIFCREPRESENTATIONITEM;
    s_Str2LoadFn["IFCPREDEFINEDDIMENSIONSYMBOL"]._loadFn = &SPFReader::loadIFCPREDEFINEDDIMENSIONSYMBOL;
    s_Str2LoadFn["IFCMOTORCONNECTIONTYPE"]._loadFn = &SPFReader::loadIFCMOTORCONNECTIONTYPE;
    s_Str2LoadFn["IFCCONDITIONCRITERION"]._loadFn = &SPFReader::loadIFCCONDITIONCRITERION;
    s_Str2LoadFn["IFCPRESENTATIONLAYERWITHSTYLE"]._loadFn = &SPFReader::loadIFCPRESENTATIONLAYERWITHSTYLE;
    s_Str2LoadFn["IFCFLOWSTORAGEDEVICE"]._loadFn = &SPFReader::loadIFCFLOWSTORAGEDEVICE;
    s_Str2LoadFn["IFCPROPERTYREFERENCEVALUE"]._loadFn = &SPFReader::loadIFCPROPERTYREFERENCEVALUE;
    s_Str2LoadFn["IFCGRIDAXIS"]._loadFn = &SPFReader::loadIFCGRIDAXIS;
    s_Str2LoadFn["IFCMEMBER"]._loadFn = &SPFReader::loadIFCMEMBER;
    s_Str2LoadFn["IFCPROTECTIVEDEVICETYPE"]._loadFn = &SPFReader::loadIFCPROTECTIVEDEVICETYPE;
    s_Str2LoadFn["IFCMATERIALLAYERSETUSAGE"]._loadFn = &SPFReader::loadIFCMATERIALLAYERSETUSAGE;
    s_Str2LoadFn["IFCANNOTATIONFILLAREAOCCURRENCE"]._loadFn = &SPFReader::loadIFCANNOTATIONFILLAREAOCCURRENCE;
    s_Str2LoadFn["IFCBUILDINGELEMENTPROXYTYPE"]._loadFn = &SPFReader::loadIFCBUILDINGELEMENTPROXYTYPE;
    s_Str2LoadFn["IFCDISTRIBUTIONFLOWELEMENTTYPE"]._loadFn = &SPFReader::loadIFCDISTRIBUTIONFLOWELEMENTTYPE;
    s_Str2LoadFn["IFCCURVESTYLEFONTANDSCALING"]._loadFn = &SPFReader::loadIFCCURVESTYLEFONTANDSCALING;
    s_Str2LoadFn["IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM"]._loadFn = &SPFReader::loadIFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM;
    s_Str2LoadFn["IFCRELFLOWCONTROLELEMENTS"]._loadFn = &SPFReader::loadIFCRELFLOWCONTROLELEMENTS;
    s_Str2LoadFn["IFCTIMESERIESSCHEDULE"]._loadFn = &SPFReader::loadIFCTIMESERIESSCHEDULE;
    s_Str2LoadFn["IFCPROPERTYENUMERATION"]._loadFn = &SPFReader::loadIFCPROPERTYENUMERATION;
    s_Str2LoadFn["IFCMATERIALLAYERSET"]._loadFn = &SPFReader::loadIFCMATERIALLAYERSET;
    s_Str2LoadFn["IFCORGANIZATIONRELATIONSHIP"]._loadFn = &SPFReader::loadIFCORGANIZATIONRELATIONSHIP;
    s_Str2LoadFn["IFCAIRTERMINALTYPE"]._loadFn = &SPFReader::loadIFCAIRTERMINALTYPE;
    s_Str2LoadFn["IFCAPPLIEDVALUERELATIONSHIP"]._loadFn = &SPFReader::loadIFCAPPLIEDVALUERELATIONSHIP;
    s_Str2LoadFn["IFCCONIC"]._loadFn = &SPFReader::loadIFCCONIC;
    s_Str2LoadFn["IFCMETRIC"]._loadFn = &SPFReader::loadIFCMETRIC;
    s_Str2LoadFn["IFCELLIPSE"]._loadFn = &SPFReader::loadIFCELLIPSE;
    s_Str2LoadFn["IFCTHERMALMATERIALPROPERTIES"]._loadFn = &SPFReader::loadIFCTHERMALMATERIALPROPERTIES;
    s_Str2LoadFn["IFCFLOWMOVINGDEVICE"]._loadFn = &SPFReader::loadIFCFLOWMOVINGDEVICE;
    s_Str2LoadFn["IFCCOVERINGTYPE"]._loadFn = &SPFReader::loadIFCCOVERINGTYPE;
    s_Str2LoadFn["IFCELLIPSEPROFILEDEF"]._loadFn = &SPFReader::loadIFCELLIPSEPROFILEDEF;
    s_Str2LoadFn["IFCSTRUCTURALANALYSISMODEL"]._loadFn = &SPFReader::loadIFCSTRUCTURALANALYSISMODEL;
    s_Str2LoadFn["IFCENERGYCONVERSIONDEVICETYPE"]._loadFn = &SPFReader::loadIFCENERGYCONVERSIONDEVICETYPE;
    s_Str2LoadFn["IFCSTRUCTURALLOADGROUP"]._loadFn = &SPFReader::loadIFCSTRUCTURALLOADGROUP;
    s_Str2LoadFn["IFCREPRESENTATIONMAP"]._loadFn = &SPFReader::loadIFCREPRESENTATIONMAP;
    s_Str2LoadFn["IFCSURFACEOFLINEAREXTRUSION"]._loadFn = &SPFReader::loadIFCSURFACEOFLINEAREXTRUSION;
    s_Str2LoadFn["IFCCABLECARRIERSEGMENTTYPE"]._loadFn = &SPFReader::loadIFCCABLECARRIERSEGMENTTYPE;
    s_Str2LoadFn["IFCCONTROLLERTYPE"]._loadFn = &SPFReader::loadIFCCONTROLLERTYPE;
    s_Str2LoadFn["IFCCOMPOSITECURVE"]._loadFn = &SPFReader::loadIFCCOMPOSITECURVE;
    s_Str2LoadFn["IFCWINDOWLININGPROPERTIES"]._loadFn = &SPFReader::loadIFCWINDOWLININGPROPERTIES;
    s_Str2LoadFn["IFCCURVEBOUNDEDPLANE"]._loadFn = &SPFReader::loadIFCCURVEBOUNDEDPLANE;
    s_Str2LoadFn["IFCAPPROVALRELATIONSHIP"]._loadFn = &SPFReader::loadIFCAPPROVALRELATIONSHIP;
    s_Str2LoadFn["IFCFUELPROPERTIES"]._loadFn = &SPFReader::loadIFCFUELPROPERTIES;
    s_Str2LoadFn["IFCPERFORMANCEHISTORY"]._loadFn = &SPFReader::loadIFCPERFORMANCEHISTORY;
    s_Str2LoadFn["IFCDISTRIBUTIONCHAMBERELEMENTTYPE"]._loadFn = &SPFReader::loadIFCDISTRIBUTIONCHAMBERELEMENTTYPE;
    s_Str2LoadFn["IFCDRAUGHTINGPREDEFINEDCURVEFONT"]._loadFn = &SPFReader::loadIFCDRAUGHTINGPREDEFINEDCURVEFONT;
    s_Str2LoadFn["IFCREPRESENTATIONCONTEXT"]._loadFn = &SPFReader::loadIFCREPRESENTATIONCONTEXT;
    s_Str2LoadFn["IFCCURTAINWALL"]._loadFn = &SPFReader::loadIFCCURTAINWALL;
    s_Str2LoadFn["IFCCOORDINATEDUNIVERSALTIMEOFFSET"]._loadFn = &SPFReader::loadIFCCOORDINATEDUNIVERSALTIMEOFFSET;
    s_Str2LoadFn["IFCRELASSIGNSTOGROUP"]._loadFn = &SPFReader::loadIFCRELASSIGNSTOGROUP;
    s_Str2LoadFn["IFCVERTEXPOINT"]._loadFn = &SPFReader::loadIFCVERTEXPOINT;
    s_Str2LoadFn["IFCRELAXATION"]._loadFn = &SPFReader::loadIFCRELAXATION;
    s_Str2LoadFn["IFCGRID"]._loadFn = &SPFReader::loadIFCGRID;
    s_Str2LoadFn["IFCCLOSEDSHELL"]._loadFn = &SPFReader::loadIFCCLOSEDSHELL;
    s_Str2LoadFn["IFCRELCONNECTSWITHREALIZINGELEMENTS"]._loadFn = &SPFReader::loadIFCRELCONNECTSWITHREALIZINGELEMENTS;
    s_Str2LoadFn["IFCLABORRESOURCE"]._loadFn = &SPFReader::loadIFCLABORRESOURCE;
    s_Str2LoadFn["IFCFURNISHINGELEMENT"]._loadFn = &SPFReader::loadIFCFURNISHINGELEMENT;
    s_Str2LoadFn["IFCANGULARDIMENSION"]._loadFn = &SPFReader::loadIFCANGULARDIMENSION;
    s_Str2LoadFn["IFCGENERALMATERIALPROPERTIES"]._loadFn = &SPFReader::loadIFCGENERALMATERIALPROPERTIES;
    s_Str2LoadFn["IFCPOINTONCURVE"]._loadFn = &SPFReader::loadIFCPOINTONCURVE;
    s_Str2LoadFn["IFCPERMEABLECOVERINGPROPERTIES"]._loadFn = &SPFReader::loadIFCPERMEABLECOVERINGPROPERTIES;
    s_Str2LoadFn["IFCFACETEDBREP"]._loadFn = &SPFReader::loadIFCFACETEDBREP;
    s_Str2LoadFn["IFCQUANTITYLENGTH"]._loadFn = &SPFReader::loadIFCQUANTITYLENGTH;
    s_Str2LoadFn["IFCCABLECARRIERFITTINGTYPE"]._loadFn = &SPFReader::loadIFCCABLECARRIERFITTINGTYPE;
    s_Str2LoadFn["IFCISHAPEPROFILEDEF"]._loadFn = &SPFReader::loadIFCISHAPEPROFILEDEF;
    s_Str2LoadFn["IFCEVAPORATORTYPE"]._loadFn = &SPFReader::loadIFCEVAPORATORTYPE;
    s_Str2LoadFn["IFCSTRUCTURALACTIVITY"]._loadFn = &SPFReader::loadIFCSTRUCTURALACTIVITY;
    s_Str2LoadFn["IFCSTRUCTURALLOADTEMPERATURE"]._loadFn = &SPFReader::loadIFCSTRUCTURALLOADTEMPERATURE;
    s_Str2LoadFn["IFCFEATUREELEMENTSUBTRACTION"]._loadFn = &SPFReader::loadIFCFEATUREELEMENTSUBTRACTION;
    s_Str2LoadFn["IFCANNOTATIONCURVEOCCURRENCE"]._loadFn = &SPFReader::loadIFCANNOTATIONCURVEOCCURRENCE;
    s_Str2LoadFn["IFCFURNISHINGELEMENTTYPE"]._loadFn = &SPFReader::loadIFCFURNISHINGELEMENTTYPE;
    s_Str2LoadFn["IFCGEOMETRICREPRESENTATIONITEM"]._loadFn = &SPFReader::loadIFCGEOMETRICREPRESENTATIONITEM;
    s_Str2LoadFn["IFCGROUP"]._loadFn = &SPFReader::loadIFCGROUP;
    s_Str2LoadFn["IFCLIGHTSOURCEDIRECTIONAL"]._loadFn = &SPFReader::loadIFCLIGHTSOURCEDIRECTIONAL;
    s_Str2LoadFn["IFCMEMBERTYPE"]._loadFn = &SPFReader::loadIFCMEMBERTYPE;
    s_Str2LoadFn["IFCTEXTSTYLE"]._loadFn = &SPFReader::loadIFCTEXTSTYLE;
    s_Str2LoadFn["IFCCLASSIFICATIONNOTATIONFACET"]._loadFn = &SPFReader::loadIFCCLASSIFICATIONNOTATIONFACET;
    s_Str2LoadFn["IFCREINFORCINGMESH"]._loadFn = &SPFReader::loadIFCREINFORCINGMESH;
    s_Str2LoadFn["IFCPHYSICALCOMPLEXQUANTITY"]._loadFn = &SPFReader::loadIFCPHYSICALCOMPLEXQUANTITY;
    s_Str2LoadFn["IFCFLOWSEGMENT"]._loadFn = &SPFReader::loadIFCFLOWSEGMENT;
    s_Str2LoadFn["IFCBLOCK"]._loadFn = &SPFReader::loadIFCBLOCK;
    s_Str2LoadFn["IFCDIMENSIONCURVE"]._loadFn = &SPFReader::loadIFCDIMENSIONCURVE;
    s_Str2LoadFn["IFCSTAIR"]._loadFn = &SPFReader::loadIFCSTAIR;
    s_Str2LoadFn["IFCRELASSOCIATESPROFILEPROPERTIES"]._loadFn = &SPFReader::loadIFCRELASSOCIATESPROFILEPROPERTIES;
    s_Str2LoadFn["IFCRELCONNECTS"]._loadFn = &SPFReader::loadIFCRELCONNECTS;
    s_Str2LoadFn["IFCTEXTSTYLEWITHBOXCHARACTERISTICS"]._loadFn = &SPFReader::loadIFCTEXTSTYLEWITHBOXCHARACTERISTICS;
    s_Str2LoadFn["IFCCSHAPEPROFILEDEF"]._loadFn = &SPFReader::loadIFCCSHAPEPROFILEDEF;
    s_Str2LoadFn["IFCFLOWCONTROLLERTYPE"]._loadFn = &SPFReader::loadIFCFLOWCONTROLLERTYPE;
    s_Str2LoadFn["IFCRELCOVERSSPACES"]._loadFn = &SPFReader::loadIFCRELCOVERSSPACES;
    s_Str2LoadFn["IFCPRODUCTDEFINITIONSHAPE"]._loadFn = &SPFReader::loadIFCPRODUCTDEFINITIONSHAPE;
    s_Str2LoadFn["IFCCONSTRAINTRELATIONSHIP"]._loadFn = &SPFReader::loadIFCCONSTRAINTRELATIONSHIP;
    s_Str2LoadFn["IFCSTRUCTURALPROFILEPROPERTIES"]._loadFn = &SPFReader::loadIFCSTRUCTURALPROFILEPROPERTIES;
    s_Str2LoadFn["IFCCONSTRUCTIONPRODUCTRESOURCE"]._loadFn = &SPFReader::loadIFCCONSTRUCTIONPRODUCTRESOURCE;
    s_Str2LoadFn["IFCRELDEFINESBYTYPE"]._loadFn = &SPFReader::loadIFCRELDEFINESBYTYPE;
    s_Str2LoadFn["IFCRELDEFINESBYPROPERTIES"]._loadFn = &SPFReader::loadIFCRELDEFINESBYPROPERTIES;
    s_Str2LoadFn["IFCSOUNDVALUE"]._loadFn = &SPFReader::loadIFCSOUNDVALUE;
    s_Str2LoadFn["IFCRIGHTCIRCULARCYLINDER"]._loadFn = &SPFReader::loadIFCRIGHTCIRCULARCYLINDER;
    s_Str2LoadFn["IFCPROCEDURE"]._loadFn = &SPFReader::loadIFCPROCEDURE;
    s_Str2LoadFn["IFCAPPLICATION"]._loadFn = &SPFReader::loadIFCAPPLICATION;
    s_Str2LoadFn["IFCSLAB"]._loadFn = &SPFReader::loadIFCSLAB;
    s_Str2LoadFn["IFCARBITRARYCLOSEDPROFILEDEF"]._loadFn = &SPFReader::loadIFCARBITRARYCLOSEDPROFILEDEF;
    s_Str2LoadFn["IFCMATERIALDEFINITIONREPRESENTATION"]._loadFn = &SPFReader::loadIFCMATERIALDEFINITIONREPRESENTATION;
    s_Str2LoadFn["IFCENERGYCONVERSIONDEVICE"]._loadFn = &SPFReader::loadIFCENERGYCONVERSIONDEVICE;
    s_Str2LoadFn["IFCWORKSCHEDULE"]._loadFn = &SPFReader::loadIFCWORKSCHEDULE;
    s_Str2LoadFn["IFCPROPERTYDEFINITION"]._loadFn = &SPFReader::loadIFCPROPERTYDEFINITION;
    s_Str2LoadFn["IFCSTRUCTURALITEM"]._loadFn = &SPFReader::loadIFCSTRUCTURALITEM;
    s_Str2LoadFn["IFCPRODUCTSOFCOMBUSTIONPROPERTIES"]._loadFn = &SPFReader::loadIFCPRODUCTSOFCOMBUSTIONPROPERTIES;
    s_Str2LoadFn["IFCSWITCHINGDEVICETYPE"]._loadFn = &SPFReader::loadIFCSWITCHINGDEVICETYPE;
    s_Str2LoadFn["IFCCLASSIFICATIONREFERENCE"]._loadFn = &SPFReader::loadIFCCLASSIFICATIONREFERENCE;
    s_Str2LoadFn["IFCELECTRICAPPLIANCETYPE"]._loadFn = &SPFReader::loadIFCELECTRICAPPLIANCETYPE;
    s_Str2LoadFn["IFCSWEPTAREASOLID"]._loadFn = &SPFReader::loadIFCSWEPTAREASOLID;
    s_Str2LoadFn["IFCRECTANGULARTRIMMEDSURFACE"]._loadFn = &SPFReader::loadIFCRECTANGULARTRIMMEDSURFACE;
    s_Str2LoadFn["IFCQUANTITYVOLUME"]._loadFn = &SPFReader::loadIFCQUANTITYVOLUME;
    s_Str2LoadFn["IFCRESOURCE"]._loadFn = &SPFReader::loadIFCRESOURCE;
    s_Str2LoadFn["IFCELECTRICGENERATORTYPE"]._loadFn = &SPFReader::loadIFCELECTRICGENERATORTYPE;
    s_Str2LoadFn["IFCSYSTEM"]._loadFn = &SPFReader::loadIFCSYSTEM;
    s_Str2LoadFn["IFCPERSONANDORGANIZATION"]._loadFn = &SPFReader::loadIFCPERSONANDORGANIZATION;
    s_Str2LoadFn["IFCSTRUCTURALMEMBER"]._loadFn = &SPFReader::loadIFCSTRUCTURALMEMBER;
    s_Str2LoadFn["IFCCONNECTIONSURFACEGEOMETRY"]._loadFn = &SPFReader::loadIFCCONNECTIONSURFACEGEOMETRY;
    s_Str2LoadFn["IFCSTYLEMODEL"]._loadFn = &SPFReader::loadIFCSTYLEMODEL;
    s_Str2LoadFn["IFCFLOWMOVINGDEVICETYPE"]._loadFn = &SPFReader::loadIFCFLOWMOVINGDEVICETYPE;
    s_Str2LoadFn["IFCCONSTRUCTIONEQUIPMENTRESOURCE"]._loadFn = &SPFReader::loadIFCCONSTRUCTIONEQUIPMENTRESOURCE;
    s_Str2LoadFn["IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM"]._loadFn = &SPFReader::loadIFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM;
    s_Str2LoadFn["IFCBOUNDARYNODECONDITIONWARPING"]._loadFn = &SPFReader::loadIFCBOUNDARYNODECONDITIONWARPING;
    s_Str2LoadFn["IFCSTRUCTURALCONNECTIONCONDITION"]._loadFn = &SPFReader::loadIFCSTRUCTURALCONNECTIONCONDITION;
    s_Str2LoadFn["IFCVIRTUALGRIDINTERSECTION"]._loadFn = &SPFReader::loadIFCVIRTUALGRIDINTERSECTION;
    s_Str2LoadFn["IFCSTYLEDREPRESENTATION"]._loadFn = &SPFReader::loadIFCSTYLEDREPRESENTATION;
    s_Str2LoadFn["IFCCONTROL"]._loadFn = &SPFReader::loadIFCCONTROL;
    s_Str2LoadFn["IFCPREDEFINEDITEM"]._loadFn = &SPFReader::loadIFCPREDEFINEDITEM;
    s_Str2LoadFn["IFCACTIONREQUEST"]._loadFn = &SPFReader::loadIFCACTIONREQUEST;
    s_Str2LoadFn["IFCSURFACESTYLEWITHTEXTURES"]._loadFn = &SPFReader::loadIFCSURFACESTYLEWITHTEXTURES;
    s_Str2LoadFn["IFCPLANARBOX"]._loadFn = &SPFReader::loadIFCPLANARBOX;
    s_Str2LoadFn["IFCMOVE"]._loadFn = &SPFReader::loadIFCMOVE;
    s_Str2LoadFn["IFCAPPROVALPROPERTYRELATIONSHIP"]._loadFn = &SPFReader::loadIFCAPPROVALPROPERTYRELATIONSHIP;
    s_Str2LoadFn["IFCTABLE"]._loadFn = &SPFReader::loadIFCTABLE;
    s_Str2LoadFn["IFCRELASSIGNSTOACTOR"]._loadFn = &SPFReader::loadIFCRELASSIGNSTOACTOR;
    s_Str2LoadFn["IFCREFERENCESVALUEDOCUMENT"]._loadFn = &SPFReader::loadIFCREFERENCESVALUEDOCUMENT;
    s_Str2LoadFn["IFCDOORSTYLE"]._loadFn = &SPFReader::loadIFCDOORSTYLE;
    s_Str2LoadFn["IFCSTRUCTURALLOADSINGLEFORCE"]._loadFn = &SPFReader::loadIFCSTRUCTURALLOADSINGLEFORCE;
    s_Str2LoadFn["IFCQUANTITYTIME"]._loadFn = &SPFReader::loadIFCQUANTITYTIME;
    s_Str2LoadFn["IFCCRANERAILFSHAPEPROFILEDEF"]._loadFn = &SPFReader::loadIFCCRANERAILFSHAPEPROFILEDEF;
    s_Str2LoadFn["IFCSTRUCTURALPLANARACTIONVARYING"]._loadFn = &SPFReader::loadIFCSTRUCTURALPLANARACTIONVARYING;
    s_Str2LoadFn["IFCTRANSFORMERTYPE"]._loadFn = &SPFReader::loadIFCTRANSFORMERTYPE;
    s_Str2LoadFn["IFCTIMESERIESVALUE"]._loadFn = &SPFReader::loadIFCTIMESERIESVALUE;
    s_Str2LoadFn["IFCDUCTFITTINGTYPE"]._loadFn = &SPFReader::loadIFCDUCTFITTINGTYPE;
    s_Str2LoadFn["IFCPLATETYPE"]._loadFn = &SPFReader::loadIFCPLATETYPE;
    s_Str2LoadFn["IFCPORT"]._loadFn = &SPFReader::loadIFCPORT;
    s_Str2LoadFn["IFCOBJECT"]._loadFn = &SPFReader::loadIFCOBJECT;
    s_Str2LoadFn["IFCCOOLINGTOWERTYPE"]._loadFn = &SPFReader::loadIFCCOOLINGTOWERTYPE;
    s_Str2LoadFn["IFCANNOTATIONSURFACE"]._loadFn = &SPFReader::loadIFCANNOTATIONSURFACE;
    s_Str2LoadFn["IFCBUILDINGELEMENTCOMPONENT"]._loadFn = &SPFReader::loadIFCBUILDINGELEMENTCOMPONENT;
    s_Str2LoadFn["IFCFLOWMETERTYPE"]._loadFn = &SPFReader::loadIFCFLOWMETERTYPE;
    s_Str2LoadFn["IFCFURNITURESTANDARD"]._loadFn = &SPFReader::loadIFCFURNITURESTANDARD;
    s_Str2LoadFn["IFCCOMPRESSORTYPE"]._loadFn = &SPFReader::loadIFCCOMPRESSORTYPE;
    s_Str2LoadFn["IFCFILLAREASTYLE"]._loadFn = &SPFReader::loadIFCFILLAREASTYLE;
    s_Str2LoadFn["IFCDERIVEDUNITELEMENT"]._loadFn = &SPFReader::loadIFCDERIVEDUNITELEMENT;
    s_Str2LoadFn["IFCSTRUCTURALCONNECTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALCONNECTION;
    s_Str2LoadFn["IFCOBJECTIVE"]._loadFn = &SPFReader::loadIFCOBJECTIVE;
    s_Str2LoadFn["IFCPLANE"]._loadFn = &SPFReader::loadIFCPLANE;
    s_Str2LoadFn["IFCCREWRESOURCE"]._loadFn = &SPFReader::loadIFCCREWRESOURCE;
    s_Str2LoadFn["IFCELECTRICALCIRCUIT"]._loadFn = &SPFReader::loadIFCELECTRICALCIRCUIT;
    s_Str2LoadFn["IFCELEMENTCOMPONENT"]._loadFn = &SPFReader::loadIFCELEMENTCOMPONENT;
    s_Str2LoadFn["IFCANNOTATIONTEXTOCCURRENCE"]._loadFn = &SPFReader::loadIFCANNOTATIONTEXTOCCURRENCE;
    s_Str2LoadFn["IFCSTRUCTURALREACTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALREACTION;
    s_Str2LoadFn["IFCSOUNDPROPERTIES"]._loadFn = &SPFReader::loadIFCSOUNDPROPERTIES;
    s_Str2LoadFn["IFCDERIVEDPROFILEDEF"]._loadFn = &SPFReader::loadIFCDERIVEDPROFILEDEF;
    s_Str2LoadFn["IFCPOLYLOOP"]._loadFn = &SPFReader::loadIFCPOLYLOOP;
    s_Str2LoadFn["IFCDUCTSEGMENTTYPE"]._loadFn = &SPFReader::loadIFCDUCTSEGMENTTYPE;
    s_Str2LoadFn["IFCAPPROVAL"]._loadFn = &SPFReader::loadIFCAPPROVAL;
    s_Str2LoadFn["IFCREPRESENTATION"]._loadFn = &SPFReader::loadIFCREPRESENTATION;
    s_Str2LoadFn["IFCAPPROVALACTORRELATIONSHIP"]._loadFn = &SPFReader::loadIFCAPPROVALACTORRELATIONSHIP;
    s_Str2LoadFn["IFCPIPEFITTINGTYPE"]._loadFn = &SPFReader::loadIFCPIPEFITTINGTYPE;
    s_Str2LoadFn["IFCTRAPEZIUMPROFILEDEF"]._loadFn = &SPFReader::loadIFCTRAPEZIUMPROFILEDEF;
    s_Str2LoadFn["IFCREVOLVEDAREASOLID"]._loadFn = &SPFReader::loadIFCREVOLVEDAREASOLID;
    s_Str2LoadFn["IFCPROPERTY"]._loadFn = &SPFReader::loadIFCPROPERTY;
    s_Str2LoadFn["IFCEDGELOOP"]._loadFn = &SPFReader::loadIFCEDGELOOP;
    s_Str2LoadFn["IFCTRIMMEDCURVE"]._loadFn = &SPFReader::loadIFCTRIMMEDCURVE;
    s_Str2LoadFn["IFCRELCONNECTSPORTTOELEMENT"]._loadFn = &SPFReader::loadIFCRELCONNECTSPORTTOELEMENT;
    s_Str2LoadFn["IFCSTRUCTURALSURFACEMEMBERVARYING"]._loadFn = &SPFReader::loadIFCSTRUCTURALSURFACEMEMBERVARYING;
    s_Str2LoadFn["IFCPRODUCTREPRESENTATION"]._loadFn = &SPFReader::loadIFCPRODUCTREPRESENTATION;
    s_Str2LoadFn["IFCDIMENSIONCURVETERMINATOR"]._loadFn = &SPFReader::loadIFCDIMENSIONCURVETERMINATOR;
    s_Str2LoadFn["IFCROOT"]._loadFn = &SPFReader::loadIFCROOT;
    s_Str2LoadFn["IFCPROPERTYLISTVALUE"]._loadFn = &SPFReader::loadIFCPROPERTYLISTVALUE;
    s_Str2LoadFn["IFCRELASSOCIATES"]._loadFn = &SPFReader::loadIFCRELASSOCIATES;
    s_Str2LoadFn["IFCDOCUMENTREFERENCE"]._loadFn = &SPFReader::loadIFCDOCUMENTREFERENCE;
    s_Str2LoadFn["IFCFLUIDFLOWPROPERTIES"]._loadFn = &SPFReader::loadIFCFLUIDFLOWPROPERTIES;
    s_Str2LoadFn["IFCEXTERNALLYDEFINEDSYMBOL"]._loadFn = &SPFReader::loadIFCEXTERNALLYDEFINEDSYMBOL;
    s_Str2LoadFn["IFCORDERACTION"]._loadFn = &SPFReader::loadIFCORDERACTION;
    s_Str2LoadFn["IFCRELOVERRIDESPROPERTIES"]._loadFn = &SPFReader::loadIFCRELOVERRIDESPROPERTIES;
    s_Str2LoadFn["IFCSTACKTERMINALTYPE"]._loadFn = &SPFReader::loadIFCSTACKTERMINALTYPE;
    s_Str2LoadFn["IFCPOINT"]._loadFn = &SPFReader::loadIFCPOINT;
    s_Str2LoadFn["IFCPREDEFINEDCOLOUR"]._loadFn = &SPFReader::loadIFCPREDEFINEDCOLOUR;
    s_Str2LoadFn["IFCCLASSIFICATIONITEMRELATIONSHIP"]._loadFn = &SPFReader::loadIFCCLASSIFICATIONITEMRELATIONSHIP;
    s_Str2LoadFn["IFCFACEBASEDSURFACEMODEL"]._loadFn = &SPFReader::loadIFCFACEBASEDSURFACEMODEL;
    s_Str2LoadFn["IFCCONNECTIONPORTGEOMETRY"]._loadFn = &SPFReader::loadIFCCONNECTIONPORTGEOMETRY;
    s_Str2LoadFn["IFCFOOTING"]._loadFn = &SPFReader::loadIFCFOOTING;
    s_Str2LoadFn["IFCSPATIALSTRUCTUREELEMENT"]._loadFn = &SPFReader::loadIFCSPATIALSTRUCTUREELEMENT;
    s_Str2LoadFn["IFCDIMENSIONPAIR"]._loadFn = &SPFReader::loadIFCDIMENSIONPAIR;
    s_Str2LoadFn["IFCRELSERVICESBUILDINGS"]._loadFn = &SPFReader::loadIFCRELSERVICESBUILDINGS;
    s_Str2LoadFn["IFCELECTRICALBASEPROPERTIES"]._loadFn = &SPFReader::loadIFCELECTRICALBASEPROPERTIES;
    s_Str2LoadFn["IFCRECTANGLEPROFILEDEF"]._loadFn = &SPFReader::loadIFCRECTANGLEPROFILEDEF;
    s_Str2LoadFn["IFCRELASSIGNSTOPROJECTORDER"]._loadFn = &SPFReader::loadIFCRELASSIGNSTOPROJECTORDER;
    s_Str2LoadFn["IFCPIPESEGMENTTYPE"]._loadFn = &SPFReader::loadIFCPIPESEGMENTTYPE;
    s_Str2LoadFn["IFCGEOMETRICSET"]._loadFn = &SPFReader::loadIFCGEOMETRICSET;
    s_Str2LoadFn["IFCSPACEPROGRAM"]._loadFn = &SPFReader::loadIFCSPACEPROGRAM;
    s_Str2LoadFn["IFCUSHAPEPROFILEDEF"]._loadFn = &SPFReader::loadIFCUSHAPEPROFILEDEF;
    s_Str2LoadFn["IFCCOOLEDBEAMTYPE"]._loadFn = &SPFReader::loadIFCCOOLEDBEAMTYPE;
    s_Str2LoadFn["IFCMATERIALCLASSIFICATIONRELATIONSHIP"]._loadFn = &SPFReader::loadIFCMATERIALCLASSIFICATIONRELATIONSHIP;
    s_Str2LoadFn["IFCELEMENTQUANTITY"]._loadFn = &SPFReader::loadIFCELEMENTQUANTITY;
    s_Str2LoadFn["IFCCLASSIFICATION"]._loadFn = &SPFReader::loadIFCCLASSIFICATION;
    s_Str2LoadFn["IFCRELASSIGNSTOPROCESS"]._loadFn = &SPFReader::loadIFCRELASSIGNSTOPROCESS;
    s_Str2LoadFn["IFCPROJECTIONCURVE"]._loadFn = &SPFReader::loadIFCPROJECTIONCURVE;
    s_Str2LoadFn["IFCGEOMETRICREPRESENTATIONCONTEXT"]._loadFn = &SPFReader::loadIFCGEOMETRICREPRESENTATIONCONTEXT;
    s_Str2LoadFn["IFCLIGHTINTENSITYDISTRIBUTION"]._loadFn = &SPFReader::loadIFCLIGHTINTENSITYDISTRIBUTION;
    s_Str2LoadFn["IFCDIRECTION"]._loadFn = &SPFReader::loadIFCDIRECTION;
    s_Str2LoadFn["IFCDISCRETEACCESSORY"]._loadFn = &SPFReader::loadIFCDISCRETEACCESSORY;
    s_Str2LoadFn["IFCPUMPTYPE"]._loadFn = &SPFReader::loadIFCPUMPTYPE;
    s_Str2LoadFn["IFCDOCUMENTELECTRONICFORMAT"]._loadFn = &SPFReader::loadIFCDOCUMENTELECTRONICFORMAT;
    s_Str2LoadFn["IFCSIMPLEPROPERTY"]._loadFn = &SPFReader::loadIFCSIMPLEPROPERTY;
    s_Str2LoadFn["IFCDISTRIBUTIONELEMENT"]._loadFn = &SPFReader::loadIFCDISTRIBUTIONELEMENT;
    s_Str2LoadFn["IFCPROPERTYSINGLEVALUE"]._loadFn = &SPFReader::loadIFCPROPERTYSINGLEVALUE;
    s_Str2LoadFn["IFCRELASSIGNSTOPRODUCT"]._loadFn = &SPFReader::loadIFCRELASSIGNSTOPRODUCT;
    s_Str2LoadFn["IFCSTRUCTURALPLANARACTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALPLANARACTION;
    s_Str2LoadFn["IFCCOLOURSPECIFICATION"]._loadFn = &SPFReader::loadIFCCOLOURSPECIFICATION;
    s_Str2LoadFn["IFCENVIRONMENTALIMPACTVALUE"]._loadFn = &SPFReader::loadIFCENVIRONMENTALIMPACTVALUE;
    s_Str2LoadFn["IFCZSHAPEPROFILEDEF"]._loadFn = &SPFReader::loadIFCZSHAPEPROFILEDEF;
    s_Str2LoadFn["IFCOWNERHISTORY"]._loadFn = &SPFReader::loadIFCOWNERHISTORY;
    s_Str2LoadFn["IFCFACETEDBREPWITHVOIDS"]._loadFn = &SPFReader::loadIFCFACETEDBREPWITHVOIDS;
    s_Str2LoadFn["IFCFILLAREASTYLETILES"]._loadFn = &SPFReader::loadIFCFILLAREASTYLETILES;
    s_Str2LoadFn["IFCBOUNDARYFACECONDITION"]._loadFn = &SPFReader::loadIFCBOUNDARYFACECONDITION;
    s_Str2LoadFn["IFCHUMIDIFIERTYPE"]._loadFn = &SPFReader::loadIFCHUMIDIFIERTYPE;
    s_Str2LoadFn["IFCSITE"]._loadFn = &SPFReader::loadIFCSITE;
    s_Str2LoadFn["IFCANNOTATIONSYMBOLOCCURRENCE"]._loadFn = &SPFReader::loadIFCANNOTATIONSYMBOLOCCURRENCE;
    s_Str2LoadFn["IFCPLATE"]._loadFn = &SPFReader::loadIFCPLATE;
    s_Str2LoadFn["IFCEDGEFEATURE"]._loadFn = &SPFReader::loadIFCEDGEFEATURE;
    s_Str2LoadFn["IFCSTRUCTURALRESULTGROUP"]._loadFn = &SPFReader::loadIFCSTRUCTURALRESULTGROUP;
    s_Str2LoadFn["IFCRELCONNECTSPATHELEMENTS"]._loadFn = &SPFReader::loadIFCRELCONNECTSPATHELEMENTS;
    s_Str2LoadFn["IFCCSGSOLID"]._loadFn = &SPFReader::loadIFCCSGSOLID;
    s_Str2LoadFn["IFCFLOWFITTING"]._loadFn = &SPFReader::loadIFCFLOWFITTING;
    s_Str2LoadFn["IFCFLOWINSTRUMENTTYPE"]._loadFn = &SPFReader::loadIFCFLOWINSTRUMENTTYPE;
    s_Str2LoadFn["IFCELECTRICDISTRIBUTIONPOINT"]._loadFn = &SPFReader::loadIFCELECTRICDISTRIBUTIONPOINT;
    s_Str2LoadFn["IFCTOPOLOGICALREPRESENTATIONITEM"]._loadFn = &SPFReader::loadIFCTOPOLOGICALREPRESENTATIONITEM;
    s_Str2LoadFn["IFCEXTRUDEDAREASOLID"]._loadFn = &SPFReader::loadIFCEXTRUDEDAREASOLID;
    s_Str2LoadFn["IFCAXIS2PLACEMENT3D"]._loadFn = &SPFReader::loadIFCAXIS2PLACEMENT3D;
    s_Str2LoadFn["IFCSURFACE"]._loadFn = &SPFReader::loadIFCSURFACE;
    s_Str2LoadFn["IFCPROPERTYSETDEFINITION"]._loadFn = &SPFReader::loadIFCPROPERTYSETDEFINITION;
    s_Str2LoadFn["IFCSECTIONREINFORCEMENTPROPERTIES"]._loadFn = &SPFReader::loadIFCSECTIONREINFORCEMENTPROPERTIES;
    s_Str2LoadFn["IFCSECTIONEDSPINE"]._loadFn = &SPFReader::loadIFCSECTIONEDSPINE;
    s_Str2LoadFn["IFCSTRUCTURALSURFACEMEMBER"]._loadFn = &SPFReader::loadIFCSTRUCTURALSURFACEMEMBER;
    s_Str2LoadFn["IFCMATERIALPROPERTIES"]._loadFn = &SPFReader::loadIFCMATERIALPROPERTIES;
    s_Str2LoadFn["IFCCURVESTYLEFONT"]._loadFn = &SPFReader::loadIFCCURVESTYLEFONT;
    s_Str2LoadFn["IFCRELCONNECTSSTRUCTURALELEMENT"]._loadFn = &SPFReader::loadIFCRELCONNECTSSTRUCTURALELEMENT;
    s_Str2LoadFn["IFCCABLESEGMENTTYPE"]._loadFn = &SPFReader::loadIFCCABLESEGMENTTYPE;
    s_Str2LoadFn["IFCLOOP"]._loadFn = &SPFReader::loadIFCLOOP;
    s_Str2LoadFn["IFCRELASSOCIATESDOCUMENT"]._loadFn = &SPFReader::loadIFCRELASSOCIATESDOCUMENT;
    s_Str2LoadFn["IFCPLANAREXTENT"]._loadFn = &SPFReader::loadIFCPLANAREXTENT;
    s_Str2LoadFn["IFCCONSTRUCTIONRESOURCE"]._loadFn = &SPFReader::loadIFCCONSTRUCTIONRESOURCE;
    s_Str2LoadFn["IFCSHAPEMODEL"]._loadFn = &SPFReader::loadIFCSHAPEMODEL;
    s_Str2LoadFn["IFCFLOWFITTINGTYPE"]._loadFn = &SPFReader::loadIFCFLOWFITTINGTYPE;
    s_Str2LoadFn["IFCPHYSICALQUANTITY"]._loadFn = &SPFReader::loadIFCPHYSICALQUANTITY;
    s_Str2LoadFn["IFCBOUNDEDCURVE"]._loadFn = &SPFReader::loadIFCBOUNDEDCURVE;
    s_Str2LoadFn["IFCBUILDINGELEMENTPART"]._loadFn = &SPFReader::loadIFCBUILDINGELEMENTPART;
    s_Str2LoadFn["IFCRATIONALBEZIERCURVE"]._loadFn = &SPFReader::loadIFCRATIONALBEZIERCURVE;
    s_Str2LoadFn["IFCSURFACECURVESWEPTAREASOLID"]._loadFn = &SPFReader::loadIFCSURFACECURVESWEPTAREASOLID;
    s_Str2LoadFn["IFCBOOLEANCLIPPINGRESULT"]._loadFn = &SPFReader::loadIFCBOOLEANCLIPPINGRESULT;
    s_Str2LoadFn["IFCVIRTUALELEMENT"]._loadFn = &SPFReader::loadIFCVIRTUALELEMENT;
    s_Str2LoadFn["IFCELEMENTTYPE"]._loadFn = &SPFReader::loadIFCELEMENTTYPE;
    s_Str2LoadFn["IFCTEXTURECOORDINATE"]._loadFn = &SPFReader::loadIFCTEXTURECOORDINATE;
    s_Str2LoadFn["IFCASSET"]._loadFn = &SPFReader::loadIFCASSET;
    s_Str2LoadFn["IFCCLASSIFICATIONNOTATION"]._loadFn = &SPFReader::loadIFCCLASSIFICATIONNOTATION;
    s_Str2LoadFn["IFCBOUNDINGBOX"]._loadFn = &SPFReader::loadIFCBOUNDINGBOX;
    s_Str2LoadFn["IFCFASTENERTYPE"]._loadFn = &SPFReader::loadIFCFASTENERTYPE;
    s_Str2LoadFn["IFCRELCONNECTSSTRUCTURALACTIVITY"]._loadFn = &SPFReader::loadIFCRELCONNECTSSTRUCTURALACTIVITY;
    s_Str2LoadFn["IFCELECTRICMOTORTYPE"]._loadFn = &SPFReader::loadIFCELECTRICMOTORTYPE;
    s_Str2LoadFn["IFCRELINTERACTIONREQUIREMENTS"]._loadFn = &SPFReader::loadIFCRELINTERACTIONREQUIREMENTS;
    s_Str2LoadFn["IFCSHAPEASPECT"]._loadFn = &SPFReader::loadIFCSHAPEASPECT;
    s_Str2LoadFn["IFCRELDEFINES"]._loadFn = &SPFReader::loadIFCRELDEFINES;
    s_Str2LoadFn["IFCAIRTOAIRHEATRECOVERYTYPE"]._loadFn = &SPFReader::loadIFCAIRTOAIRHEATRECOVERYTYPE;
    s_Str2LoadFn["IFCSTRUCTURALLOADPLANARFORCE"]._loadFn = &SPFReader::loadIFCSTRUCTURALLOADPLANARFORCE;
    s_Str2LoadFn["IFCDISTRIBUTIONCHAMBERELEMENT"]._loadFn = &SPFReader::loadIFCDISTRIBUTIONCHAMBERELEMENT;
    s_Str2LoadFn["IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP"]._loadFn = &SPFReader::loadIFCCONSTRAINTCLASSIFICATIONRELATIONSHIP;
    s_Str2LoadFn["IFCAXIS1PLACEMENT"]._loadFn = &SPFReader::loadIFCAXIS1PLACEMENT;
    s_Str2LoadFn["IFCJUNCTIONBOXTYPE"]._loadFn = &SPFReader::loadIFCJUNCTIONBOXTYPE;
    s_Str2LoadFn["IFCCONNECTIONCURVEGEOMETRY"]._loadFn = &SPFReader::loadIFCCONNECTIONCURVEGEOMETRY;
    s_Str2LoadFn["IFCSTRUCTURALPOINTCONNECTION"]._loadFn = &SPFReader::loadIFCSTRUCTURALPOINTCONNECTION;
    s_Str2LoadFn["IFCAPPLIEDVALUE"]._loadFn = &SPFReader::loadIFCAPPLIEDVALUE;
    s_Str2LoadFn["IFCFLOWSEGMENTTYPE"]._loadFn = &SPFReader::loadIFCFLOWSEGMENTTYPE;
    s_Str2LoadFn["IFCRELASSIGNS"]._loadFn = &SPFReader::loadIFCRELASSIGNS;
    s_Str2LoadFn["IFCPROCESS"]._loadFn = &SPFReader::loadIFCPROCESS;
    s_Str2LoadFn["IFCBOILERTYPE"]._loadFn = &SPFReader::loadIFCBOILERTYPE;
    s_Str2LoadFn["IFCRELPROJECTSELEMENT"]._loadFn = &SPFReader::loadIFCRELPROJECTSELEMENT;
    s_Str2LoadFn["IFCTEXTLITERALWITHEXTENT"]._loadFn = &SPFReader::loadIFCTEXTLITERALWITHEXTENT;
    s_Str2LoadFn["IFCBUILDINGELEMENT"]._loadFn = &SPFReader::loadIFCBUILDINGELEMENT;
    s_Str2LoadFn["IFCSURFACESTYLEREFRACTION"]._loadFn = &SPFReader::loadIFCSURFACESTYLEREFRACTION;
    s_Str2LoadFn["IFCRELCONNECTSPORTS"]._loadFn = &SPFReader::loadIFCRELCONNECTSPORTS;
    s_Str2LoadFn["IFCCURRENCYRELATIONSHIP"]._loadFn = &SPFReader::loadIFCCURRENCYRELATIONSHIP;
    s_Str2LoadFn["IFCLIBRARYINFORMATION"]._loadFn = &SPFReader::loadIFCLIBRARYINFORMATION;
    s_Str2LoadFn["IFCCARTESIANTRANSFORMATIONOPERATOR2D"]._loadFn = &SPFReader::loadIFCCARTESIANTRANSFORMATIONOPERATOR2D;
    s_Str2LoadFn["IFCAIRTERMINALBOXTYPE"]._loadFn = &SPFReader::loadIFCAIRTERMINALBOXTYPE;
    s_Str2LoadFn["IFCDIAMETERDIMENSION"]._loadFn = &SPFReader::loadIFCDIAMETERDIMENSION;
    s_Str2LoadFn["IFCCOLOURRGB"]._loadFn = &SPFReader::loadIFCCOLOURRGB;
    s_Str2LoadFn["IFCPROFILEDEF"]._loadFn = &SPFReader::loadIFCPROFILEDEF;
    s_Str2LoadFn["IFCCOMPOSITECURVESEGMENT"]._loadFn = &SPFReader::loadIFCCOMPOSITECURVESEGMENT;
    s_Str2LoadFn["IFCANNOTATION"]._loadFn = &SPFReader::loadIFCANNOTATION;
    s_Str2LoadFn["IFCDRAUGHTINGPREDEFINEDTEXTFONT"]._loadFn = &SPFReader::loadIFCDRAUGHTINGPREDEFINEDTEXTFONT;
    s_Str2LoadFn["IFCBLOBTEXTURE"]._loadFn = &SPFReader::loadIFCBLOBTEXTURE;
    s_Str2LoadFn["IFCSURFACESTYLESHADING"]._loadFn = &SPFReader::loadIFCSURFACESTYLESHADING;
    s_Str2LoadFn["IFCCONSTRAINTAGGREGATIONRELATIONSHIP"]._loadFn = &SPFReader::loadIFCCONSTRAINTAGGREGATIONRELATIONSHIP;
    s_Str2LoadFn["IFCTABLEROW"]._loadFn = &SPFReader::loadIFCTABLEROW;
    s_Str2LoadFn["IFCTEXTSTYLEFORDEFINEDFONT"]._loadFn = &SPFReader::loadIFCTEXTSTYLEFORDEFINEDFONT;
    s_Str2LoadFn["IFCFLOWTERMINAL"]._loadFn = &SPFReader::loadIFCFLOWTERMINAL;
    s_Str2LoadFn["IFCSANITARYTERMINALTYPE"]._loadFn = &SPFReader::loadIFCSANITARYTERMINALTYPE;
    s_Str2LoadFn["IFCRIGHTCIRCULARCONE"]._loadFn = &SPFReader::loadIFCRIGHTCIRCULARCONE;
    s_Str2LoadFn["IFCSENSORTYPE"]._loadFn = &SPFReader::loadIFCSENSORTYPE;
    s_Str2LoadFn["IFCDISTRIBUTIONCONTROLELEMENTTYPE"]._loadFn = &SPFReader::loadIFCDISTRIBUTIONCONTROLELEMENTTYPE;
    s_Str2LoadFn["IFCRAMPFLIGHTTYPE"]._loadFn = &SPFReader::loadIFCRAMPFLIGHTTYPE;
    s_Str2LoadFn["IFCEVAPORATIVECOOLERTYPE"]._loadFn = &SPFReader::loadIFCEVAPORATIVECOOLERTYPE;
    s_Str2LoadFn["IFCLOCALTIME"]._loadFn = &SPFReader::loadIFCLOCALTIME;
    s_Str2LoadFn["IFCGENERALPROFILEPROPERTIES"]._loadFn = &SPFReader::loadIFCGENERALPROFILEPROPERTIES;
    s_Str2LoadFn["IFCLIGHTSOURCESPOT"]._loadFn = &SPFReader::loadIFCLIGHTSOURCESPOT;
    s_Str2LoadFn["IFC2DCOMPOSITECURVE"]._loadFn = &SPFReader::loadIFC2DCOMPOSITECURVE;
    s_Str2LoadFn["IFCEQUIPMENTSTANDARD"]._loadFn = &SPFReader::loadIFCEQUIPMENTSTANDARD;
    s_Str2LoadFn["IFCSTRUCTURALCURVEMEMBERVARYING"]._loadFn = &SPFReader::loadIFCSTRUCTURALCURVEMEMBERVARYING;
    s_Str2LoadFn["IFCRELCONNECTSSTRUCTURALMEMBER"]._loadFn = &SPFReader::loadIFCRELCONNECTSSTRUCTURALMEMBER;
    s_Str2LoadFn["IFCSLABTYPE"]._loadFn = &SPFReader::loadIFCSLABTYPE;
    s_Str2LoadFn["IFCCSGPRIMITIVE3D"]._loadFn = &SPFReader::loadIFCCSGPRIMITIVE3D;
    s_Str2LoadFn["IFCPREDEFINEDCURVEFONT"]._loadFn = &SPFReader::loadIFCPREDEFINEDCURVEFONT;
    s_Str2LoadFn["IFCCONNECTIONGEOMETRY"]._loadFn = &SPFReader::loadIFCCONNECTIONGEOMETRY;
    s_Str2LoadFn["IFCSTAIRFLIGHTTYPE"]._loadFn = &SPFReader::loadIFCSTAIRFLIGHTTYPE;
    s_Str2LoadFn["IFCEDGE"]._loadFn = &SPFReader::loadIFCEDGE;
    s_Str2LoadFn["IFCGASTERMINALTYPE"]._loadFn = &SPFReader::loadIFCGASTERMINALTYPE;
    s_Str2LoadFn["IFCSURFACESTYLELIGHTING"]._loadFn = &SPFReader::loadIFCSURFACESTYLELIGHTING;
    s_Str2LoadFn["IFCCOILTYPE"]._loadFn = &SPFReader::loadIFCCOILTYPE;
    s_Str2LoadFn["IFCPROPERTYTABLEVALUE"]._loadFn = &SPFReader::loadIFCPROPERTYTABLEVALUE;
    s_Str2LoadFn["IFCORGANIZATION"]._loadFn = &SPFReader::loadIFCORGANIZATION;
    s_Str2LoadFn["IFCMATERIALLAYER"]._loadFn = &SPFReader::loadIFCMATERIALLAYER;
    s_Str2LoadFn["IFCBOUNDEDSURFACE"]._loadFn = &SPFReader::loadIFCBOUNDEDSURFACE;
    s_Str2LoadFn["IFCDISTRIBUTIONFLOWELEMENT"]._loadFn = &SPFReader::loadIFCDISTRIBUTIONFLOWELEMENT;
    s_Str2LoadFn["IFCRELFILLSELEMENT"]._loadFn = &SPFReader::loadIFCRELFILLSELEMENT;
    s_Str2LoadFn["IFCWALLSTANDARDCASE"]._loadFn = &SPFReader::loadIFCWALLSTANDARDCASE;
    s_Str2LoadFn["IFCSOLIDMODEL"]._loadFn = &SPFReader::loadIFCSOLIDMODEL;
    s_Str2LoadFn["IFCDEFINEDSYMBOL"]._loadFn = &SPFReader::loadIFCDEFINEDSYMBOL;
    s_Str2LoadFn["IFCMONETARYUNIT"]._loadFn = &SPFReader::loadIFCMONETARYUNIT;
    s_Str2LoadFn["IFCCOLUMNTYPE"]._loadFn = &SPFReader::loadIFCCOLUMNTYPE;
    s_Str2LoadFn["IFCRELCONTAINEDINSPATIALSTRUCTURE"]._loadFn = &SPFReader::loadIFCRELCONTAINEDINSPATIALSTRUCTURE;
    s_Str2LoadFn["IFCFIRESUPPRESSIONTERMINALTYPE"]._loadFn = &SPFReader::loadIFCFIRESUPPRESSIONTERMINALTYPE;
    s_Str2LoadFn["IFCRELASSOCIATESAPPLIEDVALUE"]._loadFn = &SPFReader::loadIFCRELASSOCIATESAPPLIEDVALUE;
    s_Str2LoadFn["IFCRELASSOCIATESCLASSIFICATION"]._loadFn = &SPFReader::loadIFCRELASSOCIATESCLASSIFICATION;
    s_Str2LoadFn["IFCCARTESIANPOINT"]._loadFn = &SPFReader::loadIFCCARTESIANPOINT;
    s_Str2LoadFn["IFCSTAIRFLIGHT"]._loadFn = &SPFReader::loadIFCSTAIRFLIGHT;
    s_Str2LoadFn["IFCELECTRICALELEMENT"]._loadFn = &SPFReader::loadIFCELECTRICALELEMENT;
    s_Str2LoadFn["IFCTEXTSTYLEFONTMODEL"]._loadFn = &SPFReader::loadIFCTEXTSTYLEFONTMODEL;
    s_Str2LoadFn["IFCMEASUREWITHUNIT"]._loadFn = &SPFReader::loadIFCMEASUREWITHUNIT;
    s_Str2LoadFn["IFCRAMP"]._loadFn = &SPFReader::loadIFCRAMP;
    s_Str2LoadFn["IFCBOUNDARYCONDITION"]._loadFn = &SPFReader::loadIFCBOUNDARYCONDITION;
    s_Str2LoadFn["IFCELEMENTARYSURFACE"]._loadFn = &SPFReader::loadIFCELEMENTARYSURFACE;
    s_Str2LoadFn["IFCDISTRIBUTIONPORT"]._loadFn = &SPFReader::loadIFCDISTRIBUTIONPORT;
    s_Str2LoadFn["IFCROUNDEDRECTANGLEPROFILEDEF"]._loadFn = &SPFReader::loadIFCROUNDEDRECTANGLEPROFILEDEF;
    s_Str2LoadFn["IFCMECHANICALCONCRETEMATERIALPROPERTIES"]._loadFn = &SPFReader::loadIFCMECHANICALCONCRETEMATERIALPROPERTIES;
    s_Str2LoadFn["IFCUNITASSIGNMENT"]._loadFn = &SPFReader::loadIFCUNITASSIGNMENT;
    s_Str2LoadFn["IFCDIMENSIONCALLOUTRELATIONSHIP"]._loadFn = &SPFReader::loadIFCDIMENSIONCALLOUTRELATIONSHIP;
    s_Str2LoadFn["IFCFACEOUTERBOUND"]._loadFn = &SPFReader::loadIFCFACEOUTERBOUND;
    s_Str2LoadFn["IFCPILE"]._loadFn = &SPFReader::loadIFCPILE;
    s_Str2LoadFn["IFCCONNECTIONPOINTECCENTRICITY"]._loadFn = &SPFReader::loadIFCCONNECTIONPOINTECCENTRICITY;
    s_Str2LoadFn["IFCPOSTALADDRESS"]._loadFn = &SPFReader::loadIFCPOSTALADDRESS;
    s_Str2LoadFn["IFCANNOTATIONSURFACEOCCURRENCE"]._loadFn = &SPFReader::loadIFCANNOTATIONSURFACEOCCURRENCE;
    s_Str2LoadFn["IFCFACEBOUND"]._loadFn = &SPFReader::loadIFCFACEBOUND;
    s_Str2LoadFn["IFCWINDOWSTYLE"]._loadFn = &SPFReader::loadIFCWINDOWSTYLE;
    s_Str2LoadFn["IFCRELVOIDSELEMENT"]._loadFn = &SPFReader::loadIFCRELVOIDSELEMENT;
    s_Str2LoadFn["IFCSTRUCTURALLOADSTATIC"]._loadFn = &SPFReader::loadIFCSTRUCTURALLOADSTATIC;
    s_Str2LoadFn["IFCPOLYLINE"]._loadFn = &SPFReader::loadIFCPOLYLINE;
    s_Str2LoadFn["IFCFLOWTREATMENTDEVICETYPE"]._loadFn = &SPFReader::loadIFCFLOWTREATMENTDEVICETYPE;

    return true;
}

namespace
{
    int initFnMap = SPFReader::InitFnMap();
}

SPFReader::SPFReader(const std::string &SPFDataCacheFile)
    : BaseSPFReader(SPFDataCacheFile)
{
}

bool SPFReader::loadIFCRELASSIGNSTOCONTROL(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELASSIGNS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssignsToControl;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssignsToControl_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 6) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToControl, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(6));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToControl, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelAssignsToControl::getClassType(), 6, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCPARAMETERIZEDPROFILEDEF(bool /*isFirst*/) {
    if (!loadIFCPROFILEDEF(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCTUBEBUNDLETYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTubeBundleType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTubeBundleType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOMPLEXPROPERTY(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (!loadIFCPROPERTY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcComplexProperty;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcComplexProperty_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 3) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcComplexProperty, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(3), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcComplexProperty, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcComplexProperty::getClassType(), 3, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCLOCALPLACEMENT(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCOBJECTPLACEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLocalPlacement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLocalPlacement_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcLocalPlacement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcLocalPlacement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcLocalPlacement::getClassType(), 0, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCSURFACESTYLERENDERING(bool isFirst) {
    if (!loadIFCSURFACESTYLESHADING(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSurfaceStyleRendering;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSurfaceStyleRendering_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELNESTS(bool isFirst) {
    if (!loadIFCRELDECOMPOSES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelNests;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelNests_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSHAPEREPRESENTATION(bool isFirst) {
    if (!loadIFCSHAPEMODEL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcShapeRepresentation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcShapeRepresentation_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDISCRETEACCESSORYTYPE(bool isFirst) {
    if (!loadIFCELEMENTCOMPONENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDiscreteAccessoryType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDiscreteAccessoryType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYBOUNDEDVALUE(bool isFirst) {
    if (!loadIFCSIMPLEPROPERTY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPropertyBoundedValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPropertyBoundedValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMATERIAL(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMaterial;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMaterial_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBEAMTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBeamType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBeamType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBUILDINGELEMENTTYPE(bool /*isFirst*/) {
    if (!loadIFCELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCREINFORCEMENTDEFINITIONPROPERTIES(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcReinforcementDefinitionProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcReinforcementDefinitionProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONNECTEDFACESET(bool isFirst) {
    if (!loadIFCTOPOLOGICALREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConnectedFaceSet;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConnectedFaceSet_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFACE(bool isFirst) {
    if (!loadIFCTOPOLOGICALREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFace;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFace_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSPACEHEATERTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSpaceHeaterType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSpaceHeaterType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONNECTIONPOINTGEOMETRY(bool isFirst) {
    if (!loadIFCCONNECTIONGEOMETRY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConnectionPointGeometry;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConnectionPointGeometry_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBOOLEANRESULT(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBooleanResult;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBooleanResult_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSWEPTDISKSOLID(bool isFirst) {
    if (!loadIFCSOLIDMODEL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSweptDiskSolid;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSweptDiskSolid_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSUBEDGE(bool isFirst) {
    if (!loadIFCEDGE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSubedge;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSubedge_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPREDEFINEDPOINTMARKERSYMBOL(bool isFirst) {
    if (!loadIFCPREDEFINEDSYMBOL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPreDefinedPointMarkerSymbol;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPreDefinedPointMarkerSymbol_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSURFACESTYLE(bool isFirst) {
    if (!loadIFCPRESENTATIONSTYLE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSurfaceStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSurfaceStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTUREDDIMENSIONCALLOUT(bool isFirst) {
    if (!loadIFCDRAUGHTINGCALLOUT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuredDimensionCallout;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuredDimensionCallout_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSPACETYPE(bool isFirst) {
    if (!loadIFCSPATIALSTRUCTUREELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSpaceType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSpaceType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROJECTORDER(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProjectOrder;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProjectOrder_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONDENSERTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCondenserType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCondenserType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCHEATEXCHANGERTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcHeatExchangerType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcHeatExchangerType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLOADSINGLEFORCEWARPING(bool isFirst) {
    if (!loadIFCSTRUCTURALLOADSINGLEFORCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralLoadSingleForceWarping;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralLoadSingleForceWarping_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFASTENER(bool isFirst) {
    if (!loadIFCELEMENTCOMPONENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFastener;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFastener_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCOPENSHELL(bool isFirst) {
    if (!loadIFCCONNECTEDFACESET(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOpenShell;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOpenShell_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCOFFSETCURVE2D(bool isFirst) {
    if (!loadIFCCURVE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOffsetCurve2D;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOffsetCurve2D_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONDITION(bool isFirst) {
    if (!loadIFCGROUP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCondition;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCondition_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBEAM(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBeam;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBeam_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROXY(bool isFirst) {
    if (!loadIFCPRODUCT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProxy;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProxy_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPERSON(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPerson;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPerson_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 7) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcPerson, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(7), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcPerson, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcPerson::getClassType(), 7, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALCURVEMEMBER(bool isFirst) {
    if (!loadIFCSTRUCTURALMEMBER(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralCurveMember;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralCurveMember_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBOXEDHALFSPACE(bool isFirst) {
    if (!loadIFCHALFSPACESOLID(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBoxedHalfSpace;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBoxedHalfSpace_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCQUANTITYAREA(bool isFirst) {
    if (!loadIFCPHYSICALSIMPLEQUANTITY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcQuantityArea;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcQuantityArea_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEXTENDEDMATERIALPROPERTIES(bool isFirst) {
    if (!loadIFCMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcExtendedMaterialProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcExtendedMaterialProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCOPTICALMATERIALPROPERTIES(bool isFirst) {
    if (!loadIFCMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOpticalMaterialProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOpticalMaterialProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONSTRAINT(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCSLIPPAGECONNECTIONCONDITION(bool isFirst) {
    if (!loadIFCSTRUCTURALCONNECTIONCONDITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSlippageConnectionCondition;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSlippageConnectionCondition_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYENUMERATEDVALUE(bool isFirst) {
    if (!loadIFCSIMPLEPROPERTY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPropertyEnumeratedValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPropertyEnumeratedValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCONNECTSELEMENTS(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelConnectsElements;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelConnectsElements_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsElements, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsElements, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsElements::getClassType(), 5, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 6) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelConnectsElements, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(6));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelConnectsElements, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsElements::getClassType(), 6, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCOUTLETTYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOutletType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOutletType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTIMESERIES(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCIRREGULARTIMESERIES(bool isFirst) {
    if (!loadIFCTIMESERIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcIrregularTimeSeries;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcIrregularTimeSeries_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALPOINTREACTION(bool isFirst) {
    if (!loadIFCSTRUCTURALREACTION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralPointReaction;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralPointReaction_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCONEDIRECTIONREPEATFACTOR(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOneDirectionRepeatFactor;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOneDirectionRepeatFactor_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPRODUCT(bool /*isFirst*/) {
    Step::Id currentRef;
    if (!loadIFCOBJECT(false)) {
        return false;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcProduct, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcProduct, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcProduct::getClassType(), 5, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 6) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcProduct, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(6));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcProduct, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcProduct::getClassType(), 6, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCADDRESS(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCPRESENTATIONLAYERASSIGNMENT(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPresentationLayerAssignment;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPresentationLayerAssignment_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 2) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcPresentationLayerAssignment, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(2), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcPresentationLayerAssignment, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcPresentationLayerAssignment::getClassType(), 2, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCSIUNIT(bool isFirst) {
    if (!loadIFCNAMEDUNIT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSIUnit;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSIUnit_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFEATUREELEMENTADDITION(bool /*isFirst*/) {
    if (!loadIFCFEATUREELEMENT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCCRANERAILASHAPEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCraneRailAShapeProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCraneRailAShapeProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFILTERTYPE(bool isFirst) {
    if (!loadIFCFLOWTREATMENTDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFilterType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFilterType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLINEARDIMENSION(bool isFirst) {
    if (!loadIFCDIMENSIONCURVEDIRECTEDCALLOUT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLinearDimension;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLinearDimension_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCWATERPROPERTIES(bool isFirst) {
    if (!loadIFCMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWaterProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWaterProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTYPEPRODUCT(bool isFirst) {
    if (!loadIFCTYPEOBJECT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTypeProduct;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTypeProduct_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEQUIPMENTELEMENT(bool isFirst) {
    if (!loadIFCELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEquipmentElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEquipmentElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCIRREGULARTIMESERIESVALUE(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcIrregularTimeSeriesValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcIrregularTimeSeriesValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCVALVETYPE(bool isFirst) {
    if (!loadIFCFLOWCONTROLLERTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcValveType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcValveType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCROOF(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRoof;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRoof_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCREINFORCINGBAR(bool isFirst) {
    if (!loadIFCREINFORCINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcReinforcingBar;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcReinforcingBar_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPRESENTATIONSTYLEASSIGNMENT(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPresentationStyleAssignment;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPresentationStyleAssignment_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCOVERSBLDGELEMENTS(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelCoversBldgElements;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelCoversBldgElements_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelCoversBldgElements, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelCoversBldgElements, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelCoversBldgElements::getClassType(), 5, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelCoversBldgElements, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelCoversBldgElements, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelCoversBldgElements::getClassType(), 4, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCREINFORCINGELEMENT(bool /*isFirst*/) {
    if (!loadIFCBUILDINGELEMENTCOMPONENT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCACTUATORTYPE(bool isFirst) {
    if (!loadIFCDISTRIBUTIONCONTROLELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcActuatorType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcActuatorType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSERVICELIFE(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcServiceLife;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcServiceLife_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCVECTOR(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcVector;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcVector_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCALARMTYPE(bool isFirst) {
    if (!loadIFCDISTRIBUTIONCONTROLELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAlarmType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAlarmType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCARBITRARYPROFILEDEFWITHVOIDS(bool isFirst) {
    if (!loadIFCARBITRARYCLOSEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcArbitraryProfileDefWithVoids;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcArbitraryProfileDefWithVoids_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDOCUMENTINFORMATION(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDocumentInformation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDocumentInformation_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 3) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcDocumentInformation, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(3), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcDocumentInformation, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcDocumentInformation::getClassType(), 3, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCSYMBOLSTYLE(bool isFirst) {
    if (!loadIFCPRESENTATIONSTYLE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSymbolStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSymbolStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRIBPLATEPROFILEPROPERTIES(bool isFirst) {
    if (!loadIFCPROFILEPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRibPlateProfileProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRibPlateProfileProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCWINDOW(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWindow;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWindow_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCROUNDEDEDGEFEATURE(bool isFirst) {
    if (!loadIFCEDGEFEATURE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRoundedEdgeFeature;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRoundedEdgeFeature_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALCURVECONNECTION(bool isFirst) {
    if (!loadIFCSTRUCTURALCONNECTION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralCurveConnection;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralCurveConnection_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLINE(bool isFirst) {
    if (!loadIFCCURVE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLine;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLine_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSPACETHERMALLOADPROPERTIES(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSpaceThermalLoadProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSpaceThermalLoadProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCAXIS2PLACEMENT2D(bool isFirst) {
    if (!loadIFCPLACEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAxis2Placement2D;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAxis2Placement2D_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYCONSTRAINTRELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPropertyConstraintRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPropertyConstraintRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcPropertyConstraintRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcPropertyConstraintRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcPropertyConstraintRelationship::getClassType(), 0, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCTIMESERIESREFERENCERELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTimeSeriesReferenceRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTimeSeriesReferenceRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcTimeSeriesReferenceRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcTimeSeriesReferenceRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcTimeSeriesReferenceRelationship::getClassType(), 0, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCPOLYGONALBOUNDEDHALFSPACE(bool isFirst) {
    if (!loadIFCHALFSPACESOLID(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPolygonalBoundedHalfSpace;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPolygonalBoundedHalfSpace_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTYLEDITEM(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStyledItem;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStyledItem_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcStyledItem, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcStyledItem, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcStyledItem::getClassType(), 0, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCDRAUGHTINGCALLOUT(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDraughtingCallout;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDraughtingCallout_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCOFFSETCURVE3D(bool isFirst) {
    if (!loadIFCCURVE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOffsetCurve3D;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOffsetCurve3D_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTEXTUREVERTEX(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTextureVertex;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTextureVertex_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELSPACEBOUNDARY(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelSpaceBoundary;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelSpaceBoundary_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelSpaceBoundary, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelSpaceBoundary, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelSpaceBoundary::getClassType(), 5, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelSpaceBoundary, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelSpaceBoundary, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelSpaceBoundary::getClassType(), 4, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCLIGHTSOURCEPOSITIONAL(bool isFirst) {
    if (!loadIFCLIGHTSOURCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLightSourcePositional;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLightSourcePositional_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELATIONSHIP(bool /*isFirst*/) {
    if (!loadIFCROOT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCDATEANDTIME(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDateAndTime;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDateAndTime_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTASK(bool isFirst) {
    if (!loadIFCPROCESS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTask;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTask_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFAILURECONNECTIONCONDITION(bool isFirst) {
    if (!loadIFCSTRUCTURALCONNECTIONCONDITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFailureConnectionCondition;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFailureConnectionCondition_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPREDEFINEDTERMINATORSYMBOL(bool isFirst) {
    if (!loadIFCPREDEFINEDSYMBOL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPreDefinedTerminatorSymbol;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPreDefinedTerminatorSymbol_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOSTITEM(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCostItem;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCostItem_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOLUMN(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcColumn;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcColumn_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCWORKPLAN(bool isFirst) {
    if (!loadIFCWORKCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWorkPlan;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWorkPlan_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFURNITURETYPE(bool isFirst) {
    if (!loadIFCFURNISHINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFurnitureType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFurnitureType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYDEPENDENCYRELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPropertyDependencyRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPropertyDependencyRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcPropertyDependencyRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcPropertyDependencyRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcPropertyDependencyRelationship::getClassType(), 0, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcPropertyDependencyRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcPropertyDependencyRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcPropertyDependencyRelationship::getClassType(), 1, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCDOORLININGPROPERTIES(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDoorLiningProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDoorLiningProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSIGNSTASKS(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELASSIGNSTOCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssignsTasks;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssignsTasks_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 7) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcRelAssignsTasks, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(7));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcRelAssignsTasks, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelAssignsTasks::getClassType(), 7, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCRELAGGREGATES(bool isFirst) {
    if (!loadIFCRELDECOMPOSES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAggregates;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAggregates_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELEMENTASSEMBLY(bool isFirst) {
    if (!loadIFCELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElementAssembly;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElementAssembly_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPIXELTEXTURE(bool isFirst) {
    if (!loadIFCSURFACETEXTURE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPixelTexture;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPixelTexture_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTEXTUREMAP(bool isFirst) {
    if (!loadIFCTEXTURECOORDINATE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTextureMap;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTextureMap_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSURFACEOFREVOLUTION(bool isFirst) {
    if (!loadIFCSWEPTSURFACE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSurfaceOfRevolution;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSurfaceOfRevolution_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSPATIALSTRUCTUREELEMENTTYPE(bool /*isFirst*/) {
    if (!loadIFCELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCQUANTITYWEIGHT(bool isFirst) {
    if (!loadIFCPHYSICALSIMPLEQUANTITY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcQuantityWeight;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcQuantityWeight_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLOADLINEARFORCE(bool isFirst) {
    if (!loadIFCSTRUCTURALLOADSTATIC(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralLoadLinearForce;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralLoadLinearForce_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLIGHTSOURCEGONIOMETRIC(bool isFirst) {
    if (!loadIFCLIGHTSOURCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLightSourceGoniometric;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLightSourceGoniometric_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCZONE(bool isFirst) {
    if (!loadIFCGROUP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcZone;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcZone_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCASYMMETRICISHAPEPROFILEDEF(bool isFirst) {
    if (!loadIFCISHAPEPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAsymmetricIShapeProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAsymmetricIShapeProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLIGHTSOURCE(bool /*isFirst*/) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSPACE(bool isFirst) {
    if (!loadIFCSPATIALSTRUCTUREELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSpace;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSpace_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRADIUSDIMENSION(bool isFirst) {
    if (!loadIFCDIMENSIONCURVEDIRECTEDCALLOUT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRadiusDimension;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRadiusDimension_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCENTERLINEPROFILEDEF(bool isFirst) {
    if (!loadIFCARBITRARYOPENPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCenterLineProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCenterLineProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDRAUGHTINGCALLOUTRELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDraughtingCalloutRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDraughtingCalloutRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 3) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcDraughtingCalloutRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(3));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcDraughtingCalloutRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcDraughtingCalloutRelationship::getClassType(), 3, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 2) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcDraughtingCalloutRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(2));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcDraughtingCalloutRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcDraughtingCalloutRelationship::getClassType(), 2, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCMECHANICALMATERIALPROPERTIES(bool isFirst) {
    if (!loadIFCMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMechanicalMaterialProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMechanicalMaterialProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCHAMFEREDGEFEATURE(bool isFirst) {
    if (!loadIFCEDGEFEATURE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcChamferEdgeFeature;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcChamferEdgeFeature_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCUNITARYEQUIPMENTTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcUnitaryEquipmentType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcUnitaryEquipmentType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDAMPERTYPE(bool isFirst) {
    if (!loadIFCFLOWCONTROLLERTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDamperType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDamperType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELOCCUPIESSPACES(bool isFirst) {
    if (!loadIFCRELASSIGNSTOACTOR(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelOccupiesSpaces;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelOccupiesSpaces_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCNAMEDUNIT(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCCLASSIFICATIONITEM(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcClassificationItem;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcClassificationItem_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcClassificationItem, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcClassificationItem, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcClassificationItem::getClassType(), 1, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCINVENTORY(bool isFirst) {
    if (!loadIFCGROUP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcInventory;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcInventory_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSIGNSTORESOURCE(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELASSIGNS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssignsToResource;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssignsToResource_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 6) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToResource, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(6));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToResource, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelAssignsToResource::getClassType(), 6, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCPATH(bool isFirst) {
    if (!loadIFCTOPOLOGICALREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPath;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPath_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTENDONANCHOR(bool isFirst) {
    if (!loadIFCREINFORCINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTendonAnchor;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTendonAnchor_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPREDEFINEDSYMBOL(bool /*isFirst*/) {
    if (!loadIFCPREDEFINEDITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCGRIDPLACEMENT(bool isFirst) {
    if (!loadIFCOBJECTPLACEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGridPlacement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGridPlacement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCURVESTYLE(bool isFirst) {
    if (!loadIFCPRESENTATIONSTYLE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCurveStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCurveStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPRESENTATIONSTYLE(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCDOCUMENTINFORMATIONRELATIONSHIP(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDocumentInformationRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDocumentInformationRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcDocumentInformationRelationship, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcDocumentInformationRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcDocumentInformationRelationship::getClassType(), 1, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcDocumentInformationRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcDocumentInformationRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcDocumentInformationRelationship::getClassType(), 0, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCGEOMETRICCURVESET(bool isFirst) {
    if (!loadIFCGEOMETRICSET(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGeometricCurveSet;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGeometricCurveSet_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCONNECTSWITHECCENTRICITY(bool isFirst) {
    if (!loadIFCRELCONNECTSSTRUCTURALMEMBER(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelConnectsWithEccentricity;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelConnectsWithEccentricity_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEXTERNALLYDEFINEDTEXTFONT(bool isFirst) {
    if (!loadIFCEXTERNALREFERENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcExternallyDefinedTextFont;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcExternallyDefinedTextFont_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCVERTEXBASEDTEXTUREMAP(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcVertexBasedTextureMap;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcVertexBasedTextureMap_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCIRCLEHOLLOWPROFILEDEF(bool isFirst) {
    if (!loadIFCCIRCLEPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCircleHollowProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCircleHollowProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLINEARACTIONVARYING(bool isFirst) {
    if (!loadIFCSTRUCTURALLINEARACTION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralLinearActionVarying;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralLinearActionVarying_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBUILDINGELEMENTPROXY(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBuildingElementProxy;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBuildingElementProxy_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELECTRICTIMECONTROLTYPE(bool isFirst) {
    if (!loadIFCFLOWCONTROLLERTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElectricTimeControlType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElectricTimeControlType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEXTERNALLYDEFINEDSURFACESTYLE(bool isFirst) {
    if (!loadIFCEXTERNALREFERENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcExternallyDefinedSurfaceStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcExternallyDefinedSurfaceStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCACTOR(bool isFirst) {
    if (!loadIFCOBJECT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcActor;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcActor_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEDGECURVE(bool isFirst) {
    if (!loadIFCEDGE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEdgeCurve;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEdgeCurve_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELECTRICFLOWSTORAGEDEVICETYPE(bool isFirst) {
    if (!loadIFCFLOWSTORAGEDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElectricFlowStorageDeviceType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElectricFlowStorageDeviceType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTRANSPORTELEMENTTYPE(bool isFirst) {
    if (!loadIFCELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTransportElementType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTransportElementType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMANIFOLDSOLIDBREP(bool /*isFirst*/) {
    if (!loadIFCSOLIDMODEL(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCRELASSOCIATESCONSTRAINT(bool isFirst) {
    if (!loadIFCRELASSOCIATES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssociatesConstraint;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssociatesConstraint_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCQUANTITYCOUNT(bool isFirst) {
    if (!loadIFCPHYSICALSIMPLEQUANTITY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcQuantityCount;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcQuantityCount_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCOBJECTPLACEMENT(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCEXTERNALREFERENCE(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCTEXTSTYLETEXTMODEL(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTextStyleTextModel;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTextStyleTextModel_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCVIBRATIONISOLATORTYPE(bool isFirst) {
    if (!loadIFCDISCRETEACCESSORYTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcVibrationIsolatorType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcVibrationIsolatorType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONVERSIONBASEDUNIT(bool isFirst) {
    if (!loadIFCNAMEDUNIT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConversionBasedUnit;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConversionBasedUnit_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCREGULARTIMESERIES(bool isFirst) {
    if (!loadIFCTIMESERIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRegularTimeSeries;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRegularTimeSeries_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDIMENSIONALEXPONENTS(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDimensionalExponents;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDimensionalExponents_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSOCIATESLIBRARY(bool isFirst) {
    if (!loadIFCRELASSOCIATES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssociatesLibrary;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssociatesLibrary_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTYPEOBJECT(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (!loadIFCOBJECTDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTypeObject;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTypeObject_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcTypeObject, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcTypeObject, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcTypeObject::getClassType(), 5, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCCOSTSCHEDULE(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCostSchedule;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCostSchedule_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSUBCONTRACTRESOURCE(bool isFirst) {
    if (!loadIFCCONSTRUCTIONRESOURCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSubContractResource;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSubContractResource_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELSEQUENCE(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelSequence;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelSequence_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelSequence, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelSequence, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelSequence::getClassType(), 5, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelSequence, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelSequence, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelSequence::getClassType(), 4, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCSYSTEMFURNITUREELEMENTTYPE(bool isFirst) {
    if (!loadIFCFURNISHINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSystemFurnitureElementType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSystemFurnitureElementType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCALENDARDATE(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCalendarDate;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCalendarDate_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLOAD(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCHYGROSCOPICMATERIALPROPERTIES(bool isFirst) {
    if (!loadIFCMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcHygroscopicMaterialProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcHygroscopicMaterialProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTSHAPEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTShapeProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTShapeProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLOWTERMINALTYPE(bool /*isFirst*/) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCHALFSPACESOLID(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcHalfSpaceSolid;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcHalfSpaceSolid_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMATERIALLIST(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMaterialList;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMaterialList_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSOCIATESMATERIAL(bool isFirst) {
    if (!loadIFCRELASSOCIATES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssociatesMaterial;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssociatesMaterial_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFEATUREELEMENT(bool /*isFirst*/) {
    if (!loadIFCELEMENT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCDISTRIBUTIONELEMENTTYPE(bool isFirst) {
    if (!loadIFCELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDistributionElementType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDistributionElementType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCWINDOWPANELPROPERTIES(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWindowPanelProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWindowPanelProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMAPPEDITEM(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMappedItem;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMappedItem_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcMappedItem, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcMappedItem, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcMappedItem::getClassType(), 0, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCTEXTLITERAL(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTextLiteral;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTextLiteral_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLIGHTDISTRIBUTIONDATA(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLightDistributionData;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLightDistributionData_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTWODIRECTIONREPEATFACTOR(bool isFirst) {
    if (!loadIFCONEDIRECTIONREPEATFACTOR(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTwoDirectionRepeatFactor;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTwoDirectionRepeatFactor_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSOCIATESAPPROVAL(bool isFirst) {
    if (!loadIFCRELASSOCIATES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssociatesApproval;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssociatesApproval_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRAILINGTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRailingType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRailingType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPOINTONSURFACE(bool isFirst) {
    if (!loadIFCPOINT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPointOnSurface;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPointOnSurface_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTENDON(bool isFirst) {
    if (!loadIFCREINFORCINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTendon;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTendon_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALACTION(bool /*isFirst*/) {
    Step::Id currentRef;
    if (!loadIFCSTRUCTURALACTIVITY(false)) {
        return false;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 10) {
        LOG_ERROR("Inverse links : Error during reading parameter 10 of IfcStructuralAction, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(10));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 10 of IfcStructuralAction, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcStructuralAction::getClassType(), 10, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCRELDECOMPOSES(bool /*isFirst*/) {
    Step::Id currentRef;
    std::vector< Step::Id > currentRefList;
    if (!loadIFCRELATIONSHIP(false)) {
        return false;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelDecomposes, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelDecomposes, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelDecomposes::getClassType(), 4, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelDecomposes, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelDecomposes, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelDecomposes::getClassType(), 5, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCENERGYPROPERTIES(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEnergyProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEnergyProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCIMAGETEXTURE(bool isFirst) {
    if (!loadIFCSURFACETEXTURE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcImageTexture;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcImageTexture_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFILLAREASTYLEHATCHING(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFillAreaStyleHatching;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFillAreaStyleHatching_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDRAUGHTINGPREDEFINEDCOLOUR(bool isFirst) {
    if (!loadIFCPREDEFINEDCOLOUR(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDraughtingPreDefinedColour;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDraughtingPreDefinedColour_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCOBJECTDEFINITION(bool /*isFirst*/) {
    if (!loadIFCROOT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCPROJECTIONELEMENT(bool isFirst) {
    if (!loadIFCFEATUREELEMENTADDITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProjectionElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProjectionElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROJECTORDERRECORD(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProjectOrderRecord;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProjectOrderRecord_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDIMENSIONCURVEDIRECTEDCALLOUT(bool isFirst) {
    if (!loadIFCDRAUGHTINGCALLOUT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDimensionCurveDirectedCallout;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDimensionCurveDirectedCallout_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDOORPANELPROPERTIES(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDoorPanelProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDoorPanelProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCVERTEX(bool isFirst) {
    if (!loadIFCTOPOLOGICALREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcVertex;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcVertex_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTRANSPORTELEMENT(bool isFirst) {
    if (!loadIFCELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTransportElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTransportElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCURVESTYLEFONTPATTERN(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCurveStyleFontPattern;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCurveStyleFontPattern_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION(bool isFirst) {
    if (!loadIFCSTRUCTURALLOADSINGLEDISPLACEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralLoadSingleDisplacementDistortion;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralLoadSingleDisplacementDistortion_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSPHERE(bool isFirst) {
    if (!loadIFCCSGPRIMITIVE3D(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSphere;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSphere_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELEMENT(bool /*isFirst*/) {
    if (!loadIFCPRODUCT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSURFACETEXTURE(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCSTRUCTURALPOINTACTION(bool isFirst) {
    if (!loadIFCSTRUCTURALACTION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralPointAction;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralPointAction_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRECTANGLEHOLLOWPROFILEDEF(bool isFirst) {
    if (!loadIFCRECTANGLEPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRectangleHollowProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRectangleHollowProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTELECOMADDRESS(bool isFirst) {
    if (!loadIFCADDRESS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTelecomAddress;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTelecomAddress_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBEZIERCURVE(bool isFirst) {
    if (!loadIFCBSPLINECURVE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBezierCurve;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBezierCurve_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFACESURFACE(bool isFirst) {
    if (!loadIFCFACE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFaceSurface;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFaceSurface_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSCHEDULETIMECONTROL(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcScheduleTimeControl;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcScheduleTimeControl_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLIGHTSOURCEAMBIENT(bool isFirst) {
    if (!loadIFCLIGHTSOURCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLightSourceAmbient;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLightSourceAmbient_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROJECT(bool isFirst) {
    if (!loadIFCOBJECT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProject;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProject_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLOWSTORAGEDEVICETYPE(bool /*isFirst*/) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCDUCTSILENCERTYPE(bool isFirst) {
    if (!loadIFCFLOWTREATMENTDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDuctSilencerType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDuctSilencerType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCIRCLE(bool isFirst) {
    if (!loadIFCCONIC(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCircle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCircle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTEXTURECOORDINATEGENERATOR(bool isFirst) {
    if (!loadIFCTEXTURECOORDINATE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTextureCoordinateGenerator;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTextureCoordinateGenerator_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONTEXTDEPENDENTUNIT(bool isFirst) {
    if (!loadIFCNAMEDUNIT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcContextDependentUnit;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcContextDependentUnit_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRECTANGULARPYRAMID(bool isFirst) {
    if (!loadIFCCSGPRIMITIVE3D(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRectangularPyramid;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRectangularPyramid_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCGEOMETRICREPRESENTATIONSUBCONTEXT(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCGEOMETRICREPRESENTATIONCONTEXT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGeometricRepresentationSubContext;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGeometricRepresentationSubContext_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 6) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcGeometricRepresentationSubContext, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(6));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcGeometricRepresentationSubContext, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcGeometricRepresentationSubContext::getClassType(), 6, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCMECHANICALSTEELMATERIALPROPERTIES(bool isFirst) {
    if (!loadIFCMECHANICALMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMechanicalSteelMaterialProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMechanicalSteelMaterialProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLIBRARYREFERENCE(bool isFirst) {
    if (!loadIFCEXTERNALREFERENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLibraryReference;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLibraryReference_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELECTRICHEATERTYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElectricHeaterType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElectricHeaterType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCWASTETERMINALTYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWasteTerminalType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWasteTerminalType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCOCCUPANT(bool isFirst) {
    if (!loadIFCACTOR(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOccupant;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOccupant_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCANNOTATIONFILLAREA(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAnnotationFillArea;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAnnotationFillArea_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLOWCONTROLLER(bool isFirst) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFlowController;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFlowController_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPERMIT(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPermit;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPermit_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONSTRUCTIONMATERIALRESOURCE(bool isFirst) {
    if (!loadIFCCONSTRUCTIONRESOURCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConstructionMaterialResource;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConstructionMaterialResource_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCARTESIANTRANSFORMATIONOPERATOR3D(bool isFirst) {
    if (!loadIFCCARTESIANTRANSFORMATIONOPERATOR(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCartesianTransformationOperator3D;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCartesianTransformationOperator3D_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELEMENTCOMPONENTTYPE(bool /*isFirst*/) {
    if (!loadIFCELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYSET(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPropertySet;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPropertySet_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDOOR(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDoor;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDoor_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCVERTEXLOOP(bool isFirst) {
    if (!loadIFCLOOP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcVertexLoop;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcVertexLoop_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCARTESIANTRANSFORMATIONOPERATOR(bool /*isFirst*/) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCBOUNDARYNODECONDITION(bool isFirst) {
    if (!loadIFCBOUNDARYCONDITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBoundaryNodeCondition;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBoundaryNodeCondition_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRAILING(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRailing;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRailing_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPHYSICALSIMPLEQUANTITY(bool /*isFirst*/) {
    if (!loadIFCPHYSICALQUANTITY(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCBUILDING(bool isFirst) {
    if (!loadIFCSPATIALSTRUCTUREELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBuilding;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBuilding_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDERIVEDUNIT(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDerivedUnit;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDerivedUnit_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROFILEPROPERTIES(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCCHILLERTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcChillerType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcChillerType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBUILDINGSTOREY(bool isFirst) {
    if (!loadIFCSPATIALSTRUCTUREELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBuildingStorey;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBuildingStorey_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTERMINATORSYMBOL(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCANNOTATIONSYMBOLOCCURRENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTerminatorSymbol;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTerminatorSymbol_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 3) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcTerminatorSymbol, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(3));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcTerminatorSymbol, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcTerminatorSymbol::getClassType(), 3, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCFLOWTREATMENTDEVICE(bool isFirst) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFlowTreatmentDevice;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFlowTreatmentDevice_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCWORKCONTROL(bool /*isFirst*/) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCBOUNDARYEDGECONDITION(bool isFirst) {
    if (!loadIFCBOUNDARYCONDITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBoundaryEdgeCondition;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBoundaryEdgeCondition_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDISTRIBUTIONCONTROLELEMENT(bool isFirst) {
    if (!loadIFCDISTRIBUTIONELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDistributionControlElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDistributionControlElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFANTYPE(bool isFirst) {
    if (!loadIFCFLOWMOVINGDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFanType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFanType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCORIENTEDEDGE(bool isFirst) {
    if (!loadIFCEDGE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOrientedEdge;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOrientedEdge_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEXTERNALLYDEFINEDHATCHSTYLE(bool isFirst) {
    if (!loadIFCEXTERNALREFERENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcExternallyDefinedHatchStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcExternallyDefinedHatchStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPREDEFINEDTEXTFONT(bool /*isFirst*/) {
    if (!loadIFCPREDEFINEDITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCCURVE(bool /*isFirst*/) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCRELREFERENCEDINSPATIALSTRUCTURE(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelReferencedInSpatialStructure;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelReferencedInSpatialStructure_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelReferencedInSpatialStructure, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelReferencedInSpatialStructure, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelReferencedInSpatialStructure::getClassType(), 4, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelReferencedInSpatialStructure, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelReferencedInSpatialStructure, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelReferencedInSpatialStructure::getClassType(), 5, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCRELSCHEDULESCOSTITEMS(bool isFirst) {
    if (!loadIFCRELASSIGNSTOCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelSchedulesCostItems;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelSchedulesCostItems_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCWALL(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWall;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWall_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOMPOSITEPROFILEDEF(bool isFirst) {
    if (!loadIFCPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCompositeProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCompositeProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMECHANICALFASTENERTYPE(bool isFirst) {
    if (!loadIFCFASTENERTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMechanicalFastenerType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMechanicalFastenerType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTANKTYPE(bool isFirst) {
    if (!loadIFCFLOWSTORAGEDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTankType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTankType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCOPENINGELEMENT(bool isFirst) {
    if (!loadIFCFEATUREELEMENTSUBTRACTION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOpeningElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOpeningElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALSTEELPROFILEPROPERTIES(bool isFirst) {
    if (!loadIFCSTRUCTURALPROFILEPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralSteelProfileProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralSteelProfileProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRAMPFLIGHT(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRampFlight;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRampFlight_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOSTVALUE(bool isFirst) {
    if (!loadIFCAPPLIEDVALUE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCostValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCostValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALSURFACECONNECTION(bool isFirst) {
    if (!loadIFCSTRUCTURALCONNECTION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralSurfaceConnection;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralSurfaceConnection_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLOADSINGLEDISPLACEMENT(bool isFirst) {
    if (!loadIFCSTRUCTURALLOADSTATIC(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralLoadSingleDisplacement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralLoadSingleDisplacement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFILLAREASTYLETILESYMBOLWITHSTYLE(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFillAreaStyleTileSymbolWithStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFillAreaStyleTileSymbolWithStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTOPOLOGYREPRESENTATION(bool isFirst) {
    if (!loadIFCSHAPEMODEL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTopologyRepresentation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTopologyRepresentation_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCARBITRARYOPENPROFILEDEF(bool isFirst) {
    if (!loadIFCPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcArbitraryOpenProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcArbitraryOpenProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCANNOTATIONOCCURRENCE(bool /*isFirst*/) {
    if (!loadIFCSTYLEDITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCACTORROLE(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcActorRole;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcActorRole_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCWALLTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWallType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWallType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLINEARACTION(bool isFirst) {
    if (!loadIFCSTRUCTURALACTION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralLinearAction;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralLinearAction_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSHELLBASEDSURFACEMODEL(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcShellBasedSurfaceModel;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcShellBasedSurfaceModel_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLSHAPEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLShapeProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLShapeProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLIGHTFIXTURETYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLightFixtureType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLightFixtureType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMECHANICALFASTENER(bool isFirst) {
    if (!loadIFCFASTENER(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMechanicalFastener;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMechanicalFastener_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOVERING(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCovering;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCovering_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSWEPTSURFACE(bool /*isFirst*/) {
    if (!loadIFCSURFACE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCCURTAINWALLTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCurtainWallType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCurtainWallType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSERVICELIFEFACTOR(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcServiceLifeFactor;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcServiceLifeFactor_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLAMPTYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLampType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLampType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCIRCLEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCircleProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCircleProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBSPLINECURVE(bool /*isFirst*/) {
    if (!loadIFCBOUNDEDCURVE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSECTIONPROPERTIES(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSectionProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSectionProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPLACEMENT(bool /*isFirst*/) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCREINFORCEMENTBARPROPERTIES(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcReinforcementBarProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcReinforcementBarProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCREPRESENTATIONITEM(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCPREDEFINEDDIMENSIONSYMBOL(bool isFirst) {
    if (!loadIFCPREDEFINEDSYMBOL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPreDefinedDimensionSymbol;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPreDefinedDimensionSymbol_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMOTORCONNECTIONTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMotorConnectionType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMotorConnectionType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONDITIONCRITERION(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConditionCriterion;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConditionCriterion_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPRESENTATIONLAYERWITHSTYLE(bool isFirst) {
    if (!loadIFCPRESENTATIONLAYERASSIGNMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPresentationLayerWithStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPresentationLayerWithStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLOWSTORAGEDEVICE(bool isFirst) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFlowStorageDevice;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFlowStorageDevice_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYREFERENCEVALUE(bool isFirst) {
    if (!loadIFCSIMPLEPROPERTY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPropertyReferenceValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPropertyReferenceValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCGRIDAXIS(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGridAxis;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGridAxis_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMEMBER(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMember;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMember_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROTECTIVEDEVICETYPE(bool isFirst) {
    if (!loadIFCFLOWCONTROLLERTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProtectiveDeviceType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProtectiveDeviceType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMATERIALLAYERSETUSAGE(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMaterialLayerSetUsage;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMaterialLayerSetUsage_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCANNOTATIONFILLAREAOCCURRENCE(bool isFirst) {
    if (!loadIFCANNOTATIONOCCURRENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAnnotationFillAreaOccurrence;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAnnotationFillAreaOccurrence_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBUILDINGELEMENTPROXYTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBuildingElementProxyType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBuildingElementProxyType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDISTRIBUTIONFLOWELEMENTTYPE(bool /*isFirst*/) {
    if (!loadIFCDISTRIBUTIONELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCCURVESTYLEFONTANDSCALING(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCurveStyleFontAndScaling;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCurveStyleFontAndScaling_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM(bool isFirst) {
    if (!loadIFCCARTESIANTRANSFORMATIONOPERATOR3D(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCartesianTransformationOperator3DnonUniform;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCartesianTransformationOperator3DnonUniform_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELFLOWCONTROLELEMENTS(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelFlowControlElements;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelFlowControlElements_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelFlowControlElements, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelFlowControlElements, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelFlowControlElements::getClassType(), 4, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelFlowControlElements, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelFlowControlElements, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelFlowControlElements::getClassType(), 5, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCTIMESERIESSCHEDULE(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTimeSeriesSchedule;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTimeSeriesSchedule_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYENUMERATION(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPropertyEnumeration;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPropertyEnumeration_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMATERIALLAYERSET(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMaterialLayerSet;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMaterialLayerSet_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcMaterialLayerSet, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcMaterialLayerSet, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcMaterialLayerSet::getClassType(), 0, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCORGANIZATIONRELATIONSHIP(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOrganizationRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOrganizationRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 3) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcOrganizationRelationship, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(3), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcOrganizationRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcOrganizationRelationship::getClassType(), 3, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 2) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcOrganizationRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(2));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcOrganizationRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcOrganizationRelationship::getClassType(), 2, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCAIRTERMINALTYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAirTerminalType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAirTerminalType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCAPPLIEDVALUERELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAppliedValueRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAppliedValueRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcAppliedValueRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcAppliedValueRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcAppliedValueRelationship::getClassType(), 0, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcAppliedValueRelationship, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcAppliedValueRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcAppliedValueRelationship::getClassType(), 1, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCCONIC(bool /*isFirst*/) {
    if (!loadIFCCURVE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCMETRIC(bool isFirst) {
    if (!loadIFCCONSTRAINT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMetric;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMetric_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELLIPSE(bool isFirst) {
    if (!loadIFCCONIC(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEllipse;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEllipse_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTHERMALMATERIALPROPERTIES(bool isFirst) {
    if (!loadIFCMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcThermalMaterialProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcThermalMaterialProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLOWMOVINGDEVICE(bool isFirst) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFlowMovingDevice;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFlowMovingDevice_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOVERINGTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCoveringType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCoveringType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELLIPSEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEllipseProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEllipseProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALANALYSISMODEL(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (!loadIFCSYSTEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralAnalysisModel;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralAnalysisModel_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 7) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcStructuralAnalysisModel, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(7), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcStructuralAnalysisModel, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcStructuralAnalysisModel::getClassType(), 7, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 8) {
        LOG_ERROR("Inverse links : Error during reading parameter 8 of IfcStructuralAnalysisModel, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(8), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 8 of IfcStructuralAnalysisModel, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcStructuralAnalysisModel::getClassType(), 8, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCENERGYCONVERSIONDEVICETYPE(bool /*isFirst*/) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLOADGROUP(bool isFirst) {
    if (!loadIFCGROUP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralLoadGroup;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralLoadGroup_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCREPRESENTATIONMAP(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRepresentationMap;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRepresentationMap_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcRepresentationMap, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcRepresentationMap, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRepresentationMap::getClassType(), 1, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCSURFACEOFLINEAREXTRUSION(bool isFirst) {
    if (!loadIFCSWEPTSURFACE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSurfaceOfLinearExtrusion;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSurfaceOfLinearExtrusion_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCABLECARRIERSEGMENTTYPE(bool isFirst) {
    if (!loadIFCFLOWSEGMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCableCarrierSegmentType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCableCarrierSegmentType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONTROLLERTYPE(bool isFirst) {
    if (!loadIFCDISTRIBUTIONCONTROLELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcControllerType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcControllerType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOMPOSITECURVE(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (!loadIFCBOUNDEDCURVE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCompositeCurve;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCompositeCurve_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcCompositeCurve, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcCompositeCurve, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcCompositeCurve::getClassType(), 0, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCWINDOWLININGPROPERTIES(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWindowLiningProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWindowLiningProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCURVEBOUNDEDPLANE(bool isFirst) {
    if (!loadIFCBOUNDEDSURFACE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCurveBoundedPlane;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCurveBoundedPlane_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCAPPROVALRELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcApprovalRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcApprovalRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcApprovalRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcApprovalRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcApprovalRelationship::getClassType(), 0, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcApprovalRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcApprovalRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcApprovalRelationship::getClassType(), 1, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCFUELPROPERTIES(bool isFirst) {
    if (!loadIFCMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFuelProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFuelProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPERFORMANCEHISTORY(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPerformanceHistory;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPerformanceHistory_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDISTRIBUTIONCHAMBERELEMENTTYPE(bool isFirst) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDistributionChamberElementType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDistributionChamberElementType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDRAUGHTINGPREDEFINEDCURVEFONT(bool isFirst) {
    if (!loadIFCPREDEFINEDCURVEFONT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDraughtingPreDefinedCurveFont;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDraughtingPreDefinedCurveFont_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCREPRESENTATIONCONTEXT(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRepresentationContext;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRepresentationContext_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCURTAINWALL(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCurtainWall;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCurtainWall_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOORDINATEDUNIVERSALTIMEOFFSET(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCoordinatedUniversalTimeOffset;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCoordinatedUniversalTimeOffset_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSIGNSTOGROUP(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELASSIGNS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssignsToGroup;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssignsToGroup_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 6) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToGroup, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(6));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToGroup, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelAssignsToGroup::getClassType(), 6, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCVERTEXPOINT(bool isFirst) {
    if (!loadIFCVERTEX(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcVertexPoint;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcVertexPoint_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELAXATION(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelaxation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelaxation_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCGRID(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (!loadIFCPRODUCT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGrid;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGrid_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 9) {
        LOG_ERROR("Inverse links : Error during reading parameter 9 of IfcGrid, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(9), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 9 of IfcGrid, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcGrid::getClassType(), 9, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 8) {
        LOG_ERROR("Inverse links : Error during reading parameter 8 of IfcGrid, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(8), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 8 of IfcGrid, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcGrid::getClassType(), 8, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 7) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcGrid, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(7), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcGrid, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcGrid::getClassType(), 7, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCCLOSEDSHELL(bool isFirst) {
    if (!loadIFCCONNECTEDFACESET(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcClosedShell;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcClosedShell_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCONNECTSWITHREALIZINGELEMENTS(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (!loadIFCRELCONNECTSELEMENTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelConnectsWithRealizingElements;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelConnectsWithRealizingElements_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 7) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcRelConnectsWithRealizingElements, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(7), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcRelConnectsWithRealizingElements, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelConnectsWithRealizingElements::getClassType(), 7, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCLABORRESOURCE(bool isFirst) {
    if (!loadIFCCONSTRUCTIONRESOURCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLaborResource;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLaborResource_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFURNISHINGELEMENT(bool isFirst) {
    if (!loadIFCELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFurnishingElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFurnishingElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCANGULARDIMENSION(bool isFirst) {
    if (!loadIFCDIMENSIONCURVEDIRECTEDCALLOUT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAngularDimension;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAngularDimension_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCGENERALMATERIALPROPERTIES(bool isFirst) {
    if (!loadIFCMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGeneralMaterialProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGeneralMaterialProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPOINTONCURVE(bool isFirst) {
    if (!loadIFCPOINT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPointOnCurve;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPointOnCurve_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPERMEABLECOVERINGPROPERTIES(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPermeableCoveringProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPermeableCoveringProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFACETEDBREP(bool isFirst) {
    if (!loadIFCMANIFOLDSOLIDBREP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFacetedBrep;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFacetedBrep_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCQUANTITYLENGTH(bool isFirst) {
    if (!loadIFCPHYSICALSIMPLEQUANTITY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcQuantityLength;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcQuantityLength_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCABLECARRIERFITTINGTYPE(bool isFirst) {
    if (!loadIFCFLOWFITTINGTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCableCarrierFittingType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCableCarrierFittingType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCISHAPEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcIShapeProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcIShapeProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEVAPORATORTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEvaporatorType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEvaporatorType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALACTIVITY(bool /*isFirst*/) {
    if (!loadIFCPRODUCT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLOADTEMPERATURE(bool isFirst) {
    if (!loadIFCSTRUCTURALLOADSTATIC(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralLoadTemperature;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralLoadTemperature_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFEATUREELEMENTSUBTRACTION(bool /*isFirst*/) {
    if (!loadIFCFEATUREELEMENT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCANNOTATIONCURVEOCCURRENCE(bool isFirst) {
    if (!loadIFCANNOTATIONOCCURRENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAnnotationCurveOccurrence;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAnnotationCurveOccurrence_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFURNISHINGELEMENTTYPE(bool isFirst) {
    if (!loadIFCELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFurnishingElementType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFurnishingElementType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCGEOMETRICREPRESENTATIONITEM(bool /*isFirst*/) {
    if (!loadIFCREPRESENTATIONITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCGROUP(bool isFirst) {
    if (!loadIFCOBJECT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGroup;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGroup_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLIGHTSOURCEDIRECTIONAL(bool isFirst) {
    if (!loadIFCLIGHTSOURCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLightSourceDirectional;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLightSourceDirectional_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMEMBERTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMemberType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMemberType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTEXTSTYLE(bool isFirst) {
    if (!loadIFCPRESENTATIONSTYLE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTextStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTextStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCLASSIFICATIONNOTATIONFACET(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcClassificationNotationFacet;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcClassificationNotationFacet_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCREINFORCINGMESH(bool isFirst) {
    if (!loadIFCREINFORCINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcReinforcingMesh;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcReinforcingMesh_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPHYSICALCOMPLEXQUANTITY(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (!loadIFCPHYSICALQUANTITY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPhysicalComplexQuantity;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPhysicalComplexQuantity_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 2) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcPhysicalComplexQuantity, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(2), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcPhysicalComplexQuantity, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcPhysicalComplexQuantity::getClassType(), 2, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCFLOWSEGMENT(bool isFirst) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFlowSegment;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFlowSegment_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBLOCK(bool isFirst) {
    if (!loadIFCCSGPRIMITIVE3D(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBlock;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBlock_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDIMENSIONCURVE(bool isFirst) {
    if (!loadIFCANNOTATIONCURVEOCCURRENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDimensionCurve;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDimensionCurve_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTAIR(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStair;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStair_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSOCIATESPROFILEPROPERTIES(bool isFirst) {
    if (!loadIFCRELASSOCIATES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssociatesProfileProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssociatesProfileProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCONNECTS(bool /*isFirst*/) {
    if (!loadIFCRELATIONSHIP(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCTEXTSTYLEWITHBOXCHARACTERISTICS(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTextStyleWithBoxCharacteristics;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTextStyleWithBoxCharacteristics_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCSHAPEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCShapeProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCShapeProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLOWCONTROLLERTYPE(bool /*isFirst*/) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCRELCOVERSSPACES(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelCoversSpaces;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelCoversSpaces_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelCoversSpaces, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelCoversSpaces, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelCoversSpaces::getClassType(), 5, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelCoversSpaces, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelCoversSpaces, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelCoversSpaces::getClassType(), 4, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCPRODUCTDEFINITIONSHAPE(bool isFirst) {
    if (!loadIFCPRODUCTREPRESENTATION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProductDefinitionShape;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProductDefinitionShape_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONSTRAINTRELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConstraintRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConstraintRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 2) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcConstraintRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(2));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcConstraintRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcConstraintRelationship::getClassType(), 2, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 3) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcConstraintRelationship, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(3), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcConstraintRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcConstraintRelationship::getClassType(), 3, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALPROFILEPROPERTIES(bool isFirst) {
    if (!loadIFCGENERALPROFILEPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralProfileProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralProfileProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONSTRUCTIONPRODUCTRESOURCE(bool isFirst) {
    if (!loadIFCCONSTRUCTIONRESOURCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConstructionProductResource;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConstructionProductResource_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELDEFINESBYTYPE(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELDEFINES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelDefinesByType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelDefinesByType_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelDefinesByType, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelDefinesByType, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelDefinesByType::getClassType(), 5, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCRELDEFINESBYPROPERTIES(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELDEFINES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelDefinesByProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelDefinesByProperties_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelDefinesByProperties, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelDefinesByProperties, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelDefinesByProperties::getClassType(), 5, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCSOUNDVALUE(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSoundValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSoundValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRIGHTCIRCULARCYLINDER(bool isFirst) {
    if (!loadIFCCSGPRIMITIVE3D(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRightCircularCylinder;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRightCircularCylinder_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROCEDURE(bool isFirst) {
    if (!loadIFCPROCESS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProcedure;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProcedure_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCAPPLICATION(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcApplication;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcApplication_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSLAB(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSlab;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSlab_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCARBITRARYCLOSEDPROFILEDEF(bool isFirst) {
    if (!loadIFCPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcArbitraryClosedProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcArbitraryClosedProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMATERIALDEFINITIONREPRESENTATION(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCPRODUCTREPRESENTATION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMaterialDefinitionRepresentation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMaterialDefinitionRepresentation_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 3) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcMaterialDefinitionRepresentation, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(3));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcMaterialDefinitionRepresentation, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcMaterialDefinitionRepresentation::getClassType(), 3, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCENERGYCONVERSIONDEVICE(bool isFirst) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEnergyConversionDevice;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEnergyConversionDevice_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCWORKSCHEDULE(bool isFirst) {
    if (!loadIFCWORKCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWorkSchedule;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWorkSchedule_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYDEFINITION(bool /*isFirst*/) {
    if (!loadIFCROOT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALITEM(bool /*isFirst*/) {
    if (!loadIFCPRODUCT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCPRODUCTSOFCOMBUSTIONPROPERTIES(bool isFirst) {
    if (!loadIFCMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProductsOfCombustionProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProductsOfCombustionProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSWITCHINGDEVICETYPE(bool isFirst) {
    if (!loadIFCFLOWCONTROLLERTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSwitchingDeviceType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSwitchingDeviceType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCLASSIFICATIONREFERENCE(bool isFirst) {
    if (!loadIFCEXTERNALREFERENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcClassificationReference;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcClassificationReference_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELECTRICAPPLIANCETYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElectricApplianceType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElectricApplianceType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSWEPTAREASOLID(bool /*isFirst*/) {
    if (!loadIFCSOLIDMODEL(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCRECTANGULARTRIMMEDSURFACE(bool isFirst) {
    if (!loadIFCBOUNDEDSURFACE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRectangularTrimmedSurface;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRectangularTrimmedSurface_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCQUANTITYVOLUME(bool isFirst) {
    if (!loadIFCPHYSICALSIMPLEQUANTITY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcQuantityVolume;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcQuantityVolume_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRESOURCE(bool /*isFirst*/) {
    if (!loadIFCOBJECT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCELECTRICGENERATORTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElectricGeneratorType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElectricGeneratorType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSYSTEM(bool isFirst) {
    if (!loadIFCGROUP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSystem;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSystem_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPERSONANDORGANIZATION(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPersonAndOrganization;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPersonAndOrganization_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcPersonAndOrganization, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcPersonAndOrganization, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcPersonAndOrganization::getClassType(), 1, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcPersonAndOrganization, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcPersonAndOrganization, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcPersonAndOrganization::getClassType(), 0, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALMEMBER(bool /*isFirst*/) {
    if (!loadIFCSTRUCTURALITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCCONNECTIONSURFACEGEOMETRY(bool isFirst) {
    if (!loadIFCCONNECTIONGEOMETRY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConnectionSurfaceGeometry;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConnectionSurfaceGeometry_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTYLEMODEL(bool /*isFirst*/) {
    if (!loadIFCREPRESENTATION(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCFLOWMOVINGDEVICETYPE(bool /*isFirst*/) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCCONSTRUCTIONEQUIPMENTRESOURCE(bool isFirst) {
    if (!loadIFCCONSTRUCTIONRESOURCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConstructionEquipmentResource;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConstructionEquipmentResource_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM(bool isFirst) {
    if (!loadIFCCARTESIANTRANSFORMATIONOPERATOR2D(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCartesianTransformationOperator2DnonUniform;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCartesianTransformationOperator2DnonUniform_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBOUNDARYNODECONDITIONWARPING(bool isFirst) {
    if (!loadIFCBOUNDARYNODECONDITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBoundaryNodeConditionWarping;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBoundaryNodeConditionWarping_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALCONNECTIONCONDITION(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCVIRTUALGRIDINTERSECTION(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcVirtualGridIntersection;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcVirtualGridIntersection_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcVirtualGridIntersection, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcVirtualGridIntersection, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcVirtualGridIntersection::getClassType(), 0, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCSTYLEDREPRESENTATION(bool isFirst) {
    if (!loadIFCSTYLEMODEL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStyledRepresentation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStyledRepresentation_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONTROL(bool /*isFirst*/) {
    if (!loadIFCOBJECT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCPREDEFINEDITEM(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCACTIONREQUEST(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcActionRequest;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcActionRequest_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSURFACESTYLEWITHTEXTURES(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSurfaceStyleWithTextures;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSurfaceStyleWithTextures_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPLANARBOX(bool isFirst) {
    if (!loadIFCPLANAREXTENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPlanarBox;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPlanarBox_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMOVE(bool isFirst) {
    if (!loadIFCTASK(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMove;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMove_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCAPPROVALPROPERTYRELATIONSHIP(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcApprovalPropertyRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcApprovalPropertyRelationship_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTABLE(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTable;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTable_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcTable, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcTable, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcTable::getClassType(), 1, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCRELASSIGNSTOACTOR(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELASSIGNS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssignsToActor;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssignsToActor_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 6) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToActor, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(6));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToActor, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelAssignsToActor::getClassType(), 6, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCREFERENCESVALUEDOCUMENT(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcReferencesValueDocument;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcReferencesValueDocument_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcReferencesValueDocument, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcReferencesValueDocument, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcReferencesValueDocument::getClassType(), 1, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCDOORSTYLE(bool isFirst) {
    if (!loadIFCTYPEPRODUCT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDoorStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDoorStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLOADSINGLEFORCE(bool isFirst) {
    if (!loadIFCSTRUCTURALLOADSTATIC(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralLoadSingleForce;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralLoadSingleForce_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCQUANTITYTIME(bool isFirst) {
    if (!loadIFCPHYSICALSIMPLEQUANTITY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcQuantityTime;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcQuantityTime_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCRANERAILFSHAPEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCraneRailFShapeProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCraneRailFShapeProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALPLANARACTIONVARYING(bool isFirst) {
    if (!loadIFCSTRUCTURALPLANARACTION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralPlanarActionVarying;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralPlanarActionVarying_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTRANSFORMERTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTransformerType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTransformerType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTIMESERIESVALUE(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTimeSeriesValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTimeSeriesValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDUCTFITTINGTYPE(bool isFirst) {
    if (!loadIFCFLOWFITTINGTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDuctFittingType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDuctFittingType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPLATETYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPlateType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPlateType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPORT(bool /*isFirst*/) {
    if (!loadIFCPRODUCT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCOBJECT(bool /*isFirst*/) {
    if (!loadIFCOBJECTDEFINITION(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCCOOLINGTOWERTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCoolingTowerType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCoolingTowerType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCANNOTATIONSURFACE(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAnnotationSurface;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAnnotationSurface_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcAnnotationSurface, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcAnnotationSurface, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcAnnotationSurface::getClassType(), 1, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCBUILDINGELEMENTCOMPONENT(bool /*isFirst*/) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCFLOWMETERTYPE(bool isFirst) {
    if (!loadIFCFLOWCONTROLLERTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFlowMeterType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFlowMeterType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFURNITURESTANDARD(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFurnitureStandard;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFurnitureStandard_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOMPRESSORTYPE(bool isFirst) {
    if (!loadIFCFLOWMOVINGDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCompressorType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCompressorType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFILLAREASTYLE(bool isFirst) {
    if (!loadIFCPRESENTATIONSTYLE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFillAreaStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFillAreaStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDERIVEDUNITELEMENT(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDerivedUnitElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDerivedUnitElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALCONNECTION(bool /*isFirst*/) {
    if (!loadIFCSTRUCTURALITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCOBJECTIVE(bool isFirst) {
    if (!loadIFCCONSTRAINT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcObjective;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcObjective_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPLANE(bool isFirst) {
    if (!loadIFCELEMENTARYSURFACE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPlane;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPlane_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCREWRESOURCE(bool isFirst) {
    if (!loadIFCCONSTRUCTIONRESOURCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCrewResource;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCrewResource_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELECTRICALCIRCUIT(bool isFirst) {
    if (!loadIFCSYSTEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElectricalCircuit;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElectricalCircuit_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELEMENTCOMPONENT(bool /*isFirst*/) {
    if (!loadIFCELEMENT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCANNOTATIONTEXTOCCURRENCE(bool isFirst) {
    if (!loadIFCANNOTATIONOCCURRENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAnnotationTextOccurrence;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAnnotationTextOccurrence_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALREACTION(bool /*isFirst*/) {
    if (!loadIFCSTRUCTURALACTIVITY(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSOUNDPROPERTIES(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSoundProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSoundProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDERIVEDPROFILEDEF(bool isFirst) {
    if (!loadIFCPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDerivedProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDerivedProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPOLYLOOP(bool isFirst) {
    if (!loadIFCLOOP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPolyLoop;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPolyLoop_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDUCTSEGMENTTYPE(bool isFirst) {
    if (!loadIFCFLOWSEGMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDuctSegmentType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDuctSegmentType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCAPPROVAL(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcApproval;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcApproval_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCREPRESENTATION(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRepresentation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRepresentation_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcRepresentation, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcRepresentation, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRepresentation::getClassType(), 0, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCAPPROVALACTORRELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcApprovalActorRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcApprovalActorRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcApprovalActorRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcApprovalActorRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcApprovalActorRelationship::getClassType(), 1, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCPIPEFITTINGTYPE(bool isFirst) {
    if (!loadIFCFLOWFITTINGTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPipeFittingType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPipeFittingType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTRAPEZIUMPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTrapeziumProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTrapeziumProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCREVOLVEDAREASOLID(bool isFirst) {
    if (!loadIFCSWEPTAREASOLID(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRevolvedAreaSolid;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRevolvedAreaSolid_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTY(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCEDGELOOP(bool isFirst) {
    if (!loadIFCLOOP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEdgeLoop;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEdgeLoop_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTRIMMEDCURVE(bool isFirst) {
    if (!loadIFCBOUNDEDCURVE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTrimmedCurve;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTrimmedCurve_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCONNECTSPORTTOELEMENT(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelConnectsPortToElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelConnectsPortToElement_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsPortToElement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsPortToElement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsPortToElement::getClassType(), 5, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelConnectsPortToElement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelConnectsPortToElement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsPortToElement::getClassType(), 4, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALSURFACEMEMBERVARYING(bool isFirst) {
    if (!loadIFCSTRUCTURALSURFACEMEMBER(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralSurfaceMemberVarying;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralSurfaceMemberVarying_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPRODUCTREPRESENTATION(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProductRepresentation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProductRepresentation_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 2) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcProductRepresentation, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(2), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcProductRepresentation, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcProductRepresentation::getClassType(), 2, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCDIMENSIONCURVETERMINATOR(bool isFirst) {
    if (!loadIFCTERMINATORSYMBOL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDimensionCurveTerminator;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDimensionCurveTerminator_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCROOT(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCPROPERTYLISTVALUE(bool isFirst) {
    if (!loadIFCSIMPLEPROPERTY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPropertyListValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPropertyListValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSOCIATES(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (!loadIFCRELATIONSHIP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssociates;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssociates_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelAssociates, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelAssociates, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelAssociates::getClassType(), 4, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCDOCUMENTREFERENCE(bool isFirst) {
    if (!loadIFCEXTERNALREFERENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDocumentReference;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDocumentReference_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLUIDFLOWPROPERTIES(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFluidFlowProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFluidFlowProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEXTERNALLYDEFINEDSYMBOL(bool isFirst) {
    if (!loadIFCEXTERNALREFERENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcExternallyDefinedSymbol;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcExternallyDefinedSymbol_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCORDERACTION(bool isFirst) {
    if (!loadIFCTASK(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOrderAction;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOrderAction_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELOVERRIDESPROPERTIES(bool isFirst) {
    if (!loadIFCRELDEFINESBYPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelOverridesProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelOverridesProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTACKTERMINALTYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStackTerminalType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStackTerminalType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPOINT(bool /*isFirst*/) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCPREDEFINEDCOLOUR(bool /*isFirst*/) {
    if (!loadIFCPREDEFINEDITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCCLASSIFICATIONITEMRELATIONSHIP(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcClassificationItemRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcClassificationItemRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcClassificationItemRelationship, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcClassificationItemRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcClassificationItemRelationship::getClassType(), 1, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcClassificationItemRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcClassificationItemRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcClassificationItemRelationship::getClassType(), 0, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCFACEBASEDSURFACEMODEL(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFaceBasedSurfaceModel;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFaceBasedSurfaceModel_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONNECTIONPORTGEOMETRY(bool isFirst) {
    if (!loadIFCCONNECTIONGEOMETRY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConnectionPortGeometry;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConnectionPortGeometry_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFOOTING(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFooting;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFooting_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSPATIALSTRUCTUREELEMENT(bool /*isFirst*/) {
    if (!loadIFCPRODUCT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCDIMENSIONPAIR(bool isFirst) {
    if (!loadIFCDRAUGHTINGCALLOUTRELATIONSHIP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDimensionPair;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDimensionPair_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELSERVICESBUILDINGS(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelServicesBuildings;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelServicesBuildings_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelServicesBuildings, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelServicesBuildings, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelServicesBuildings::getClassType(), 5, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelServicesBuildings, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelServicesBuildings, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelServicesBuildings::getClassType(), 4, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCELECTRICALBASEPROPERTIES(bool isFirst) {
    if (!loadIFCENERGYPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElectricalBaseProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElectricalBaseProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRECTANGLEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRectangleProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRectangleProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSIGNSTOPROJECTORDER(bool isFirst) {
    if (!loadIFCRELASSIGNSTOCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssignsToProjectOrder;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssignsToProjectOrder_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPIPESEGMENTTYPE(bool isFirst) {
    if (!loadIFCFLOWSEGMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPipeSegmentType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPipeSegmentType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCGEOMETRICSET(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGeometricSet;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGeometricSet_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSPACEPROGRAM(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSpaceProgram;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSpaceProgram_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCUSHAPEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcUShapeProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcUShapeProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOOLEDBEAMTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCooledBeamType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCooledBeamType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMATERIALCLASSIFICATIONRELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMaterialClassificationRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMaterialClassificationRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 1) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcMaterialClassificationRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(1));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 1 of IfcMaterialClassificationRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcMaterialClassificationRelationship::getClassType(), 1, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCELEMENTQUANTITY(bool isFirst) {
    if (!loadIFCPROPERTYSETDEFINITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElementQuantity;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElementQuantity_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCLASSIFICATION(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcClassification;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcClassification_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSIGNSTOPROCESS(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELASSIGNS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssignsToProcess;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssignsToProcess_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 6) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToProcess, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(6));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToProcess, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelAssignsToProcess::getClassType(), 6, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCPROJECTIONCURVE(bool isFirst) {
    if (!loadIFCANNOTATIONCURVEOCCURRENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcProjectionCurve;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcProjectionCurve_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCGEOMETRICREPRESENTATIONCONTEXT(bool isFirst) {
    if (!loadIFCREPRESENTATIONCONTEXT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGeometricRepresentationContext;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGeometricRepresentationContext_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLIGHTINTENSITYDISTRIBUTION(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLightIntensityDistribution;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLightIntensityDistribution_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDIRECTION(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDirection;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDirection_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDISCRETEACCESSORY(bool isFirst) {
    if (!loadIFCELEMENTCOMPONENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDiscreteAccessory;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDiscreteAccessory_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPUMPTYPE(bool isFirst) {
    if (!loadIFCFLOWMOVINGDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPumpType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPumpType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDOCUMENTELECTRONICFORMAT(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDocumentElectronicFormat;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDocumentElectronicFormat_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSIMPLEPROPERTY(bool /*isFirst*/) {
    if (!loadIFCPROPERTY(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCDISTRIBUTIONELEMENT(bool isFirst) {
    if (!loadIFCELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDistributionElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDistributionElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYSINGLEVALUE(bool isFirst) {
    if (!loadIFCSIMPLEPROPERTY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPropertySingleValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPropertySingleValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSIGNSTOPRODUCT(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELASSIGNS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssignsToProduct;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssignsToProduct_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 6) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToProduct, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(6));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcRelAssignsToProduct, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelAssignsToProduct::getClassType(), 6, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALPLANARACTION(bool isFirst) {
    if (!loadIFCSTRUCTURALACTION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralPlanarAction;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralPlanarAction_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOLOURSPECIFICATION(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCENVIRONMENTALIMPACTVALUE(bool isFirst) {
    if (!loadIFCAPPLIEDVALUE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEnvironmentalImpactValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEnvironmentalImpactValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCZSHAPEPROFILEDEF(bool isFirst) {
    if (!loadIFCPARAMETERIZEDPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcZShapeProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcZShapeProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCOWNERHISTORY(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOwnerHistory;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOwnerHistory_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFACETEDBREPWITHVOIDS(bool isFirst) {
    if (!loadIFCMANIFOLDSOLIDBREP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFacetedBrepWithVoids;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFacetedBrepWithVoids_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFILLAREASTYLETILES(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFillAreaStyleTiles;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFillAreaStyleTiles_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBOUNDARYFACECONDITION(bool isFirst) {
    if (!loadIFCBOUNDARYCONDITION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBoundaryFaceCondition;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBoundaryFaceCondition_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCHUMIDIFIERTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcHumidifierType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcHumidifierType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSITE(bool isFirst) {
    if (!loadIFCSPATIALSTRUCTUREELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSite;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSite_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCANNOTATIONSYMBOLOCCURRENCE(bool isFirst) {
    if (!loadIFCANNOTATIONOCCURRENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAnnotationSymbolOccurrence;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAnnotationSymbolOccurrence_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPLATE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPlate;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPlate_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEDGEFEATURE(bool /*isFirst*/) {
    if (!loadIFCFEATUREELEMENTSUBTRACTION(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALRESULTGROUP(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCGROUP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralResultGroup;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralResultGroup_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 6) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcStructuralResultGroup, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(6));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 6 of IfcStructuralResultGroup, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcStructuralResultGroup::getClassType(), 6, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCRELCONNECTSPATHELEMENTS(bool isFirst) {
    if (!loadIFCRELCONNECTSELEMENTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelConnectsPathElements;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelConnectsPathElements_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCSGSOLID(bool isFirst) {
    if (!loadIFCSOLIDMODEL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCsgSolid;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCsgSolid_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLOWFITTING(bool isFirst) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFlowFitting;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFlowFitting_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLOWINSTRUMENTTYPE(bool isFirst) {
    if (!loadIFCDISTRIBUTIONCONTROLELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFlowInstrumentType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFlowInstrumentType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELECTRICDISTRIBUTIONPOINT(bool isFirst) {
    if (!loadIFCFLOWCONTROLLER(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElectricDistributionPoint;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElectricDistributionPoint_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTOPOLOGICALREPRESENTATIONITEM(bool /*isFirst*/) {
    if (!loadIFCREPRESENTATIONITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCEXTRUDEDAREASOLID(bool isFirst) {
    if (!loadIFCSWEPTAREASOLID(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcExtrudedAreaSolid;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcExtrudedAreaSolid_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCAXIS2PLACEMENT3D(bool isFirst) {
    if (!loadIFCPLACEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAxis2Placement3D;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAxis2Placement3D_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSURFACE(bool /*isFirst*/) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYSETDEFINITION(bool /*isFirst*/) {
    if (!loadIFCPROPERTYDEFINITION(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSECTIONREINFORCEMENTPROPERTIES(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSectionReinforcementProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSectionReinforcementProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSECTIONEDSPINE(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSectionedSpine;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSectionedSpine_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALSURFACEMEMBER(bool isFirst) {
    if (!loadIFCSTRUCTURALMEMBER(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralSurfaceMember;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralSurfaceMember_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMATERIALPROPERTIES(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCCURVESTYLEFONT(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCurveStyleFont;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCurveStyleFont_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCONNECTSSTRUCTURALELEMENT(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelConnectsStructuralElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelConnectsStructuralElement_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelConnectsStructuralElement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelConnectsStructuralElement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsStructuralElement::getClassType(), 4, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsStructuralElement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsStructuralElement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsStructuralElement::getClassType(), 5, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCCABLESEGMENTTYPE(bool isFirst) {
    if (!loadIFCFLOWSEGMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCableSegmentType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCableSegmentType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLOOP(bool isFirst) {
    if (!loadIFCTOPOLOGICALREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLoop;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLoop_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSOCIATESDOCUMENT(bool isFirst) {
    if (!loadIFCRELASSOCIATES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssociatesDocument;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssociatesDocument_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPLANAREXTENT(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPlanarExtent;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPlanarExtent_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONSTRUCTIONRESOURCE(bool /*isFirst*/) {
    if (!loadIFCRESOURCE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSHAPEMODEL(bool /*isFirst*/) {
    if (!loadIFCREPRESENTATION(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCFLOWFITTINGTYPE(bool /*isFirst*/) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCPHYSICALQUANTITY(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCBOUNDEDCURVE(bool /*isFirst*/) {
    if (!loadIFCCURVE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCBUILDINGELEMENTPART(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTCOMPONENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBuildingElementPart;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBuildingElementPart_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRATIONALBEZIERCURVE(bool isFirst) {
    if (!loadIFCBEZIERCURVE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRationalBezierCurve;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRationalBezierCurve_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSURFACECURVESWEPTAREASOLID(bool isFirst) {
    if (!loadIFCSWEPTAREASOLID(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSurfaceCurveSweptAreaSolid;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSurfaceCurveSweptAreaSolid_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBOOLEANCLIPPINGRESULT(bool isFirst) {
    if (!loadIFCBOOLEANRESULT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBooleanClippingResult;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBooleanClippingResult_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCVIRTUALELEMENT(bool isFirst) {
    if (!loadIFCELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcVirtualElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcVirtualElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELEMENTTYPE(bool /*isFirst*/) {
    if (!loadIFCTYPEPRODUCT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCTEXTURECOORDINATE(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCASSET(bool isFirst) {
    if (!loadIFCGROUP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAsset;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAsset_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCLASSIFICATIONNOTATION(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcClassificationNotation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcClassificationNotation_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBOUNDINGBOX(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBoundingBox;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBoundingBox_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFASTENERTYPE(bool isFirst) {
    if (!loadIFCELEMENTCOMPONENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFastenerType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFastenerType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCONNECTSSTRUCTURALACTIVITY(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelConnectsStructuralActivity;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelConnectsStructuralActivity_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsStructuralActivity, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsStructuralActivity, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsStructuralActivity::getClassType(), 5, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelConnectsStructuralActivity, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelConnectsStructuralActivity, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsStructuralActivity::getClassType(), 4, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCELECTRICMOTORTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElectricMotorType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElectricMotorType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELINTERACTIONREQUIREMENTS(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelInteractionRequirements;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelInteractionRequirements_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 7) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcRelInteractionRequirements, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(7));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 7 of IfcRelInteractionRequirements, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelInteractionRequirements::getClassType(), 7, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 8) {
        LOG_ERROR("Inverse links : Error during reading parameter 8 of IfcRelInteractionRequirements, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(8));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 8 of IfcRelInteractionRequirements, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelInteractionRequirements::getClassType(), 8, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCSHAPEASPECT(bool isFirst) {
    Step::Id currentRef;
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcShapeAspect;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcShapeAspect_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcShapeAspect, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcShapeAspect, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcShapeAspect::getClassType(), 4, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcShapeAspect, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcShapeAspect, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcShapeAspect::getClassType(), 0, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCRELDEFINES(bool /*isFirst*/) {
    std::vector< Step::Id > currentRefList;
    if (!loadIFCRELATIONSHIP(false)) {
        return false;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelDefines, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelDefines, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelDefines::getClassType(), 4, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCAIRTOAIRHEATRECOVERYTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAirToAirHeatRecoveryType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAirToAirHeatRecoveryType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLOADPLANARFORCE(bool isFirst) {
    if (!loadIFCSTRUCTURALLOADSTATIC(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralLoadPlanarForce;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralLoadPlanarForce_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDISTRIBUTIONCHAMBERELEMENT(bool isFirst) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDistributionChamberElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDistributionChamberElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONSTRAINTCLASSIFICATIONRELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConstraintClassificationRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConstraintClassificationRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 0) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcConstraintClassificationRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(0));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 0 of IfcConstraintClassificationRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcConstraintClassificationRelationship::getClassType(), 0, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCAXIS1PLACEMENT(bool isFirst) {
    if (!loadIFCPLACEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAxis1Placement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAxis1Placement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCJUNCTIONBOXTYPE(bool isFirst) {
    if (!loadIFCFLOWFITTINGTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcJunctionBoxType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcJunctionBoxType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONNECTIONCURVEGEOMETRY(bool isFirst) {
    if (!loadIFCCONNECTIONGEOMETRY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConnectionCurveGeometry;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConnectionCurveGeometry_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALPOINTCONNECTION(bool isFirst) {
    if (!loadIFCSTRUCTURALCONNECTION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralPointConnection;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralPointConnection_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCAPPLIEDVALUE(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCFLOWSEGMENTTYPE(bool /*isFirst*/) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCRELASSIGNS(bool /*isFirst*/) {
    std::vector< Step::Id > currentRefList;
    if (!loadIFCRELATIONSHIP(false)) {
        return false;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelAssigns, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelAssigns, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelAssigns::getClassType(), 4, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCPROCESS(bool /*isFirst*/) {
    if (!loadIFCOBJECT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCBOILERTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBoilerType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBoilerType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELPROJECTSELEMENT(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelProjectsElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelProjectsElement_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelProjectsElement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelProjectsElement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelProjectsElement::getClassType(), 4, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelProjectsElement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelProjectsElement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelProjectsElement::getClassType(), 5, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCTEXTLITERALWITHEXTENT(bool isFirst) {
    if (!loadIFCTEXTLITERAL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTextLiteralWithExtent;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTextLiteralWithExtent_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBUILDINGELEMENT(bool /*isFirst*/) {
    if (!loadIFCELEMENT(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCSURFACESTYLEREFRACTION(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSurfaceStyleRefraction;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSurfaceStyleRefraction_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCONNECTSPORTS(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelConnectsPorts;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelConnectsPorts_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsPorts, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsPorts, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsPorts::getClassType(), 5, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelConnectsPorts, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelConnectsPorts, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsPorts::getClassType(), 4, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCCURRENCYRELATIONSHIP(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCurrencyRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCurrencyRelationship_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLIBRARYINFORMATION(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLibraryInformation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLibraryInformation_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcLibraryInformation, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcLibraryInformation, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcLibraryInformation::getClassType(), 4, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCCARTESIANTRANSFORMATIONOPERATOR2D(bool isFirst) {
    if (!loadIFCCARTESIANTRANSFORMATIONOPERATOR(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCartesianTransformationOperator2D;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCartesianTransformationOperator2D_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCAIRTERMINALBOXTYPE(bool isFirst) {
    if (!loadIFCFLOWCONTROLLERTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAirTerminalBoxType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAirTerminalBoxType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDIAMETERDIMENSION(bool isFirst) {
    if (!loadIFCDIMENSIONCURVEDIRECTEDCALLOUT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDiameterDimension;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDiameterDimension_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOLOURRGB(bool isFirst) {
    if (!loadIFCCOLOURSPECIFICATION(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcColourRgb;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcColourRgb_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROFILEDEF(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCCOMPOSITECURVESEGMENT(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCompositeCurveSegment;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCompositeCurveSegment_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCANNOTATION(bool isFirst) {
    if (!loadIFCPRODUCT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAnnotation;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAnnotation_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDRAUGHTINGPREDEFINEDTEXTFONT(bool isFirst) {
    if (!loadIFCPREDEFINEDTEXTFONT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDraughtingPreDefinedTextFont;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDraughtingPreDefinedTextFont_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBLOBTEXTURE(bool isFirst) {
    if (!loadIFCSURFACETEXTURE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBlobTexture;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBlobTexture_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSURFACESTYLESHADING(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSurfaceStyleShading;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSurfaceStyleShading_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONSTRAINTAGGREGATIONRELATIONSHIP(bool isFirst) {
    Step::Id currentRef;
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConstraintAggregationRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConstraintAggregationRelationship_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 2) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcConstraintAggregationRelationship, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(2));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 2 of IfcConstraintAggregationRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcConstraintAggregationRelationship::getClassType(), 2, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 3) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcConstraintAggregationRelationship, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(3), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 3 of IfcConstraintAggregationRelationship, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcConstraintAggregationRelationship::getClassType(), 3, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCTABLEROW(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTableRow;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTableRow_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTEXTSTYLEFORDEFINEDFONT(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTextStyleForDefinedFont;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTextStyleForDefinedFont_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLOWTERMINAL(bool isFirst) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFlowTerminal;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFlowTerminal_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSANITARYTERMINALTYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSanitaryTerminalType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSanitaryTerminalType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRIGHTCIRCULARCONE(bool isFirst) {
    if (!loadIFCCSGPRIMITIVE3D(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRightCircularCone;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRightCircularCone_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSENSORTYPE(bool isFirst) {
    if (!loadIFCDISTRIBUTIONCONTROLELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSensorType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSensorType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDISTRIBUTIONCONTROLELEMENTTYPE(bool /*isFirst*/) {
    if (!loadIFCDISTRIBUTIONELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCRAMPFLIGHTTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRampFlightType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRampFlightType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEVAPORATIVECOOLERTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEvaporativeCoolerType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEvaporativeCoolerType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLOCALTIME(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLocalTime;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLocalTime_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCGENERALPROFILEPROPERTIES(bool isFirst) {
    if (!loadIFCPROFILEPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGeneralProfileProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGeneralProfileProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCLIGHTSOURCESPOT(bool isFirst) {
    if (!loadIFCLIGHTSOURCEPOSITIONAL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcLightSourceSpot;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcLightSourceSpot_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFC2DCOMPOSITECURVE(bool isFirst) {
    if (!loadIFCCOMPOSITECURVE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfc2DCompositeCurve;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_Ifc2DCompositeCurve_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEQUIPMENTSTANDARD(bool isFirst) {
    if (!loadIFCCONTROL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEquipmentStandard;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEquipmentStandard_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALCURVEMEMBERVARYING(bool isFirst) {
    if (!loadIFCSTRUCTURALCURVEMEMBER(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStructuralCurveMemberVarying;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStructuralCurveMemberVarying_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCONNECTSSTRUCTURALMEMBER(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelConnectsStructuralMember;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelConnectsStructuralMember_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsStructuralMember, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelConnectsStructuralMember, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsStructuralMember::getClassType(), 5, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelConnectsStructuralMember, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelConnectsStructuralMember, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelConnectsStructuralMember::getClassType(), 4, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCSLABTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSlabType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSlabType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCSGPRIMITIVE3D(bool /*isFirst*/) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCPREDEFINEDCURVEFONT(bool /*isFirst*/) {
    if (!loadIFCPREDEFINEDITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCCONNECTIONGEOMETRY(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCSTAIRFLIGHTTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStairFlightType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStairFlightType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCEDGE(bool isFirst) {
    if (!loadIFCTOPOLOGICALREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcEdge;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcEdge_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCGASTERMINALTYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcGasTerminalType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcGasTerminalType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSURFACESTYLELIGHTING(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcSurfaceStyleLighting;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcSurfaceStyleLighting_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOILTYPE(bool isFirst) {
    if (!loadIFCENERGYCONVERSIONDEVICETYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCoilType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCoilType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPROPERTYTABLEVALUE(bool isFirst) {
    if (!loadIFCSIMPLEPROPERTY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPropertyTableValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPropertyTableValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCORGANIZATION(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcOrganization;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcOrganization_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcOrganization, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcOrganization, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcOrganization::getClassType(), 4, m_currentId);
        }
    }
    return true;
}

bool SPFReader::loadIFCMATERIALLAYER(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMaterialLayer;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMaterialLayer_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBOUNDEDSURFACE(bool isFirst) {
    if (!loadIFCSURFACE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcBoundedSurface;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcBoundedSurface_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDISTRIBUTIONFLOWELEMENT(bool isFirst) {
    if (!loadIFCDISTRIBUTIONELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDistributionFlowElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDistributionFlowElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELFILLSELEMENT(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelFillsElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelFillsElement_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelFillsElement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelFillsElement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelFillsElement::getClassType(), 5, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelFillsElement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelFillsElement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelFillsElement::getClassType(), 4, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCWALLSTANDARDCASE(bool isFirst) {
    if (!loadIFCWALL(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWallStandardCase;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWallStandardCase_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSOLIDMODEL(bool /*isFirst*/) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCDEFINEDSYMBOL(bool isFirst) {
    if (!loadIFCGEOMETRICREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDefinedSymbol;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDefinedSymbol_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMONETARYUNIT(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMonetaryUnit;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMonetaryUnit_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCOLUMNTYPE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENTTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcColumnType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcColumnType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELCONTAINEDINSPATIALSTRUCTURE(bool isFirst) {
    std::vector< Step::Id > currentRefList;
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelContainedInSpatialStructure;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelContainedInSpatialStructure_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelContainedInSpatialStructure, line " << m_currentLineNb);
        return false;
    }
    Step::getIdListParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4), currentRefList);
    if (currentRefList[0] == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelContainedInSpatialStructure, line " << m_currentLineNb);
        return false;
    }
    if (currentRefList[0] != Step::Id_UNSET) {
        for (unsigned int i = 0; i < currentRefList.size(); i++) {
            m_expressDataSet->getArgs(currentRefList[i])->addInverse(IfcRelContainedInSpatialStructure::getClassType(), 4, m_currentId);
        }
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelContainedInSpatialStructure, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelContainedInSpatialStructure, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelContainedInSpatialStructure::getClassType(), 5, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCFIRESUPPRESSIONTERMINALTYPE(bool isFirst) {
    if (!loadIFCFLOWTERMINALTYPE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFireSuppressionTerminalType;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFireSuppressionTerminalType_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSOCIATESAPPLIEDVALUE(bool isFirst) {
    if (!loadIFCRELASSOCIATES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssociatesAppliedValue;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssociatesAppliedValue_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELASSOCIATESCLASSIFICATION(bool isFirst) {
    if (!loadIFCRELASSOCIATES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelAssociatesClassification;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelAssociatesClassification_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCARTESIANPOINT(bool isFirst) {
    if (!loadIFCPOINT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcCartesianPoint;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcCartesianPoint_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCSTAIRFLIGHT(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcStairFlight;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcStairFlight_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCELECTRICALELEMENT(bool isFirst) {
    if (!loadIFCELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcElectricalElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcElectricalElement_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCTEXTSTYLEFONTMODEL(bool isFirst) {
    if (!loadIFCPREDEFINEDTEXTFONT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcTextStyleFontModel;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcTextStyleFontModel_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMEASUREWITHUNIT(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMeasureWithUnit;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMeasureWithUnit_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRAMP(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRamp;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRamp_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCBOUNDARYCONDITION(bool /*isFirst*/) {
    return true;
}

bool SPFReader::loadIFCELEMENTARYSURFACE(bool /*isFirst*/) {
    if (!loadIFCSURFACE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCDISTRIBUTIONPORT(bool isFirst) {
    if (!loadIFCPORT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDistributionPort;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDistributionPort_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCROUNDEDRECTANGLEPROFILEDEF(bool isFirst) {
    if (!loadIFCRECTANGLEPROFILEDEF(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRoundedRectangleProfileDef;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRoundedRectangleProfileDef_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCMECHANICALCONCRETEMATERIALPROPERTIES(bool isFirst) {
    if (!loadIFCMECHANICALMATERIALPROPERTIES(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcMechanicalConcreteMaterialProperties;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcMechanicalConcreteMaterialProperties_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCUNITASSIGNMENT(bool isFirst) {
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcUnitAssignment;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcUnitAssignment_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCDIMENSIONCALLOUTRELATIONSHIP(bool isFirst) {
    if (!loadIFCDRAUGHTINGCALLOUTRELATIONSHIP(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcDimensionCalloutRelationship;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcDimensionCalloutRelationship_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFACEOUTERBOUND(bool isFirst) {
    if (!loadIFCFACEBOUND(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFaceOuterBound;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFaceOuterBound_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPILE(bool isFirst) {
    if (!loadIFCBUILDINGELEMENT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPile;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPile_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCCONNECTIONPOINTECCENTRICITY(bool isFirst) {
    if (!loadIFCCONNECTIONPOINTGEOMETRY(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcConnectionPointEccentricity;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcConnectionPointEccentricity_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCPOSTALADDRESS(bool isFirst) {
    if (!loadIFCADDRESS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPostalAddress;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPostalAddress_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCANNOTATIONSURFACEOCCURRENCE(bool isFirst) {
    if (!loadIFCANNOTATIONOCCURRENCE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcAnnotationSurfaceOccurrence;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcAnnotationSurfaceOccurrence_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFACEBOUND(bool isFirst) {
    if (!loadIFCTOPOLOGICALREPRESENTATIONITEM(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcFaceBound;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcFaceBound_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCWINDOWSTYLE(bool isFirst) {
    if (!loadIFCTYPEPRODUCT(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcWindowStyle;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcWindowStyle_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCRELVOIDSELEMENT(bool isFirst) {
    Step::Id currentRef;
    if (!loadIFCRELCONNECTS(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcRelVoidsElement;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcRelVoidsElement_Map[m_currentId] = m_currentObj;
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 4) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelVoidsElement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(4));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 4 of IfcRelVoidsElement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelVoidsElement::getClassType(), 4, m_currentId);
    }
    if (m_currentObj->Step::BaseSPFObject::getArgs()->argc() <= 5) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelVoidsElement, line " << m_currentLineNb);
        return false;
    }
    currentRef = Step::getIdParam(m_currentObj->Step::BaseSPFObject::getArgs()->at(5));
    if (currentRef == Step::Id_UNDEF) {
        LOG_ERROR("Inverse links : Error during reading parameter 5 of IfcRelVoidsElement, line " << m_currentLineNb);
        return false;
    }
    if (currentRef != Step::Id_UNSET) {
        m_expressDataSet->getArgs(currentRef)->addInverse(IfcRelVoidsElement::getClassType(), 5, m_currentId);
    }
    return true;
}

bool SPFReader::loadIFCSTRUCTURALLOADSTATIC(bool /*isFirst*/) {
    if (!loadIFCSTRUCTURALLOAD(false)) {
        return false;
    }
    return true;
}

bool SPFReader::loadIFCPOLYLINE(bool isFirst) {
    if (!loadIFCBOUNDEDCURVE(false)) {
        return false;
    }
    if (isFirst) {
        m_currentType = &ExpressDataSet::allocateIfcPolyline;
        static_cast< ExpressDataSet * > (m_expressDataSet)->m_IfcPolyline_Map[m_currentId] = m_currentObj;
    }
    return true;
}

bool SPFReader::loadIFCFLOWTREATMENTDEVICETYPE(bool /*isFirst*/) {
    if (!loadIFCDISTRIBUTIONFLOWELEMENTTYPE(false)) {
        return false;
    }
    return true;
}

bool SPFReader::callLoadFunction(const std::string &s) {
    Str2LoadFn::iterator it = s_Str2LoadFn.find(s);
    if (it == s_Str2LoadFn.end()) {
        return false;
    }
    else {
        return (this->*(it->second._loadFn))(true);
    }
}

bool SPFReader::read(std::istream &ifs, size_t inputSize) {
    m_expressDataSet = new ExpressDataSet;
    if (!Step::BaseSPFReader::read(ifs,inputSize)) {
        delete m_expressDataSet;
        m_expressDataSet = 0;
        return false;
    }
    m_expressDataSet->setHeader(m_header);
    return true;
}

bool SPFReader::readBin(std::istream &ifs) {
    m_expressDataSet = new ExpressDataSet;
    if (!Step::BaseSPFReader::readBin(ifs)) {
        delete m_expressDataSet;
        m_expressDataSet = 0;
        return false;
    }
    m_expressDataSet->setHeader(m_header);
    return true;
}

